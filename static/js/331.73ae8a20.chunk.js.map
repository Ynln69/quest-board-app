{"version":3,"file":"static/js/331.73ae8a20.chunk.js","mappings":"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","sources":["components/Modal/Modal.styles.js","components/Modal/Modal.jsx","components/UserInfo/UserInfo.styled.jsx","components/EditProfile/EditProfile.styled.jsx","components/EditProfile/EditProfile.jsx","components/UserInfo/UserInfo.jsx","redux/theme/selectors.js","components/Sidebar/Sidebar.styled.jsx","schemas/helpSchema.js","components/NeedHelp/NeedHelpForm.jsx","components/NeedHelp/NeedHelpModal.jsx","components/Sidebar/Sidebar.jsx","components/Header/Header.styled.jsx","components/Header/Header.jsx","components/HeaderDashboard/HeaderDashboard.jsx","components/Task/Task.jsx","components/Column/Column.jsx","components/MainDashboard/MainDashboard.jsx","schemas/initialUserModal.js","components/Dashboard/Dashboard.jsx","pages/HomePage/HomePage.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Backdrop = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n\n  width: 100%;\n  height: 100%;\n\n  background-color: rgba(21, 21, 21, 0.3);\n  transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n`;\n\nexport const ModalWindow = styled.div`\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  width: 100%;\n  padding: 24px;\n\n  border-radius: 8px;\n  box-shadow: 0px 4px 16px 0px rgba(22, 22, 22, 0.05);\n  transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  background-color: rgb(252, 252, 252);\n\n  @media screen and (min-width: 375px) {\n    width: 335px;\n  }\n  @media screen and (min-width: 768px) {\n    width: 350px;\n  }\n`;\n\nexport const Heading = styled.h3`\n  margin-bottom: 24px;\n  color: #161616;\n  font-family: Poppins;\n  font-size: 18px;\n  font-style: normal;\n  font-weight: 500;\n  line-height: normal;\n  letter-spacing: -0.36px;\n`;\n\nexport const CloseBtn = styled.svg`\n  width: 18px;\n  height: 18px;\n  position: absolute;\n  right: 14px;\n  top: 14px;\n  border-radius: 50%;\n  background-color: transparent;\n  cursor: pointer;\n  transition: background-color 250ms ease-in;\n  stroke: #161616;\n\n  &:hover,\n  :focus {\n  }\n`;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport Sprite from '../../images/sprite.svg';\nimport { Backdrop, CloseBtn, Heading, ModalWindow } from './Modal.styles';\n\nfunction Modal({ children, isOpen, handleClose, heading }) {\n  if (!isOpen) return null;\n\n  const handleKeyDown = event => {\n    if (event.key === 'Escape') {\n      handleClose();\n    }\n  };\n\n  if (isOpen) {\n    window.addEventListener('keydown', handleKeyDown);\n  }\n\n  return ReactDOM.createPortal(\n    <Backdrop onClick={handleClose}>\n      <ModalWindow onClick={e => e.stopPropagation()}>\n        <Heading>{heading}</Heading>\n        <CloseBtn onClick={handleClose}>\n          <use xlinkHref={`${Sprite}#icon-x-close`} />\n        </CloseBtn>\n        <div>{children}</div>\n      </ModalWindow>\n    </Backdrop>,\n    document.getElementById('modal-root')\n  );\n}\nexport default Modal;\n","import styled from '@emotion/styled';\n\nexport const Container = styled.div`\ndisplay: flex;\nalign-items: center;\ngap: 8px;\nmargin-left: 14px;\n`;\n\nexport const Avatar = styled.svg`\n  width: 32px;\n  height: 32px;\n  background: #bedbb0;\n   `;","import styled from '@emotion/styled';\nimport { Form, Field } from 'formik';\n\nexport const Container = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n\n  width: 100%;\n  height: 100%;\n  color: #fff;\n  font-family: Poppins;\n  font-size: 18px;\n  font-style: normal;\n  font-weight: 500;\n  line-height: normal;\n  letter-spacing: -0.36px;\n  background-color: rgba(21, 21, 21, 0.3);\n  transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n`;\n\nexport const EditProfileModal = styled.div`\nposition: absolute;\ntop: 50%;\nleft: 50%;\ntransform: translate(-50%, -50%);\nwidth: 100%;\npadding: 24px;\n\nborder-radius: 8px;\nbox-shadow: 0px 2px 4px 0px rgba(22, 22, 22, 1);\ntransition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\nbackground-color: #1f1f1f;\n\ncubic-bezier(0.4, 0, 0.2, 1)\n @media screen and (min-width: 375px) {\n  width: 335px;\n}\n@media screen and (min-width: 768px) {\n  width: 400px;\n`;\n\nexport const ModalCloseButton = styled.button`\n  width: 18px;\n  height: 18px;\n  position: absolute;\n  right: 14px;\n  top: 14px;\n  border-radius: 50%;\n  background-color: transparent;\n  cursor: pointer;\n  transition: background-color 250ms ease-in;\n  stroke: #161616;\n\n  &:hover,\n  :focus {\n  }\n`;\n\nexport const FormBox = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  margin-top: 14px;\n  gap: 14px;\n\n  font-size: 14px;\n  font-weight: 400;\n  letter-spacing: -0.28px;\n`;\n\nexport const FieldUser = styled(Field)`\n  width: 287px;\n    height: 49px;\n\n    color: #ffffff;\n    background-color: #1f1f1f;\n    opacity: 0.4;\n    border: 1px solid #bedbb0;\n    padding-left: 18px;\n    box-shadow: 0px 4px 16px rgba(22, 22, 22, 0.08);\n    border-radius: 8px;\n\n    outline: none;\n    transition: all 500ms;\n\n    &:hover,\n    &:focus,\n    &:active {\n      opacity: 1;\n      box-shadow: 0px 4px 16px 0px rgba(22, 22, 22, 0.08);\n    }\n\n    @media screen and (min-width: 768px) {\n      width: 352px;\n    }\n  }\n`;\n\nexport const PhotoInputWrapper = styled.label`\nwidth: 68px;\nheight: 78px;\nflex-shrink: 0;\ndisplay: flex;\nflex-direction: column;\njustify-content: center;\nalign-items: center;\ncursor: pointer;\n\n// svg {\n//   width: 68px;\n//   height: 68px;\n//   fill: #fff;\n// }\n`;\n\nexport const AvatarImage = styled.img`\nwidth: 100%;\nheight: 100%;\nobject-fit: cover;\nborder-radius: 50%;\n`;\n\nexport const SaveBtn = styled.button`\n  width: 100%;\n  height: 49px;\n  margin-top: 24px;\n  text-align: center;\n\n  background: #bedbb0;\n  border-radius: 8px;\n  color: #ffffff;\n  cursor: pointer;\n\n  @media screen and (max-width: 768px) {\n    width: 250px;\n  }\n`;\n\nexport const FileInput = styled.input`\n   position: absolute;\n  width: 0;\n  height: 0;\n  opacity: 0;\n  display: none;\n`;\n\nexport const IconPlus = styled.svg`\n  position: absolute;\n  width: 24px;\nheight: 24px;\n  cursor: pointer;\n  background-color: #bedbb0;\n  border-radius: 8px;\n  padding: 4px;\n  fill: #161616;\n`;\n\nexport const IconUserWrapper = styled.div`\n  position: relative;\n  width: 68px;\n  height: 68px;\n`;","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Formik, ErrorMessage } from 'formik';\nimport {\n  Container,\n  ModalCloseButton,\n  EditProfileModal,\n  FormBox,\n  PhotoInputWrapper,\n  AvatarImage,\n  FieldUser,\n  FileInput,\n  IconPlus,\n  IconUserWrapper,\n  SaveBtn,\n} from './EditProfile.styled';\nimport { updateProfileData } from 'redux/user/profileSlice';\nimport Sprite from '../../images/sprite.svg';\n\nconst EditProfile = ({ onClose }) => {\n  const { photo, name, email, password } = useSelector(state => state.profile);\n  const dispatch = useDispatch();\n\n  const handleFormSubmit = async values => {\n    dispatch(updateProfileData(values));\n    onClose();\n  };\n\n  const handleAvatarClick = () => {\n    document.getElementById('newPhotoInput').click();\n  };\n\n  return (\n    <Container>\n      <EditProfileModal>\n        <div>Edit profile</div>\n        <ModalCloseButton onClick={onClose}><use xlinkHref={`${Sprite}#icon-x-close`} /></ModalCloseButton>\n        <Formik\n          initialValues={{\n            newPhoto: photo,\n            newName: name,\n            newEmail: email,\n            newPassword: password,\n          }}\n          onSubmit={handleFormSubmit}\n        >\n          {({ isSubmitting, values, setFieldValue }) => (\n            <FormBox>\n              <PhotoInputWrapper>\n                {values.newPhoto ? (\n                  <>\n                    <AvatarImage\n                      src={values.newPhoto}\n                      alt=\"User Avatar\"\n                      width=\"68\"\n                      height=\"68\"\n                      onClick={handleAvatarClick}\n                    />\n                    <IconPlus onClick={handleAvatarClick}>\n                      <use href={`${Sprite}#icon-plus`} />\n                    </IconPlus>\n                  </>\n                ) : (\n                  <IconUserWrapper onClick={handleAvatarClick}>\n                    <svg className=\"icon-user\" width=\"68\" height=\"68\">\n                      <use href={`${Sprite}#icon-user`} />\n                    </svg>\n                    <IconPlus onClick={handleAvatarClick}>\n                      <use href={`${Sprite}#icon-plus`} />\n                    </IconPlus>\n                  </IconUserWrapper>\n                )}\n                <FileInput\n                  id=\"newPhotoInput\"\n                  type=\"file\"\n                  name=\"newPhoto\"\n                  onChange={event => {\n                    setFieldValue(\n                      'newPhoto',\n                      URL.createObjectURL(event.currentTarget.files[0])\n                    );\n                  }}\n                />\n              </PhotoInputWrapper>\n              <label>\n                <FieldUser type=\"text\" name=\"newName\" />\n                <ErrorMessage name=\"newName\" component=\"div\" />\n              </label>\n              <label>\n                <FieldUser type=\"email\" name=\"newEmail\" />\n                <ErrorMessage name=\"newEmail\" component=\"div\" />\n              </label>\n              <label>\n                <FieldUser type=\"password\" name=\"newPassword\" />\n                <ErrorMessage name=\"newPassword\" component=\"div\" />\n              </label>\n              <SaveBtn type=\"submit\" disabled={isSubmitting}>\n                Save\n              </SaveBtn>\n            </FormBox>\n          )}\n        </Formik>\n      </EditProfileModal>\n    </Container>\n  );\n};\n\nexport default EditProfile;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { Container, Avatar } from './UserInfo.styled';\nimport EditProfile from 'components/EditProfile/EditProfile';\n\nconst UserInfo = () => {\n  const { photo, name } = useSelector(state => state.profile);\n  const [isModalOpen, setModalOpen] = React.useState(false);\n\n  const openModal = () => {\n    setModalOpen(true);\n  };\n\n  const closeModal = () => {\n    setModalOpen(false);\n  };\n\n  return (\n    <Container>\n      <div>{name}</div>\n      <Avatar src={photo} alt=\"User Avatar\" onClick={openModal} />\n      {isModalOpen && <EditProfile onClose={closeModal} />}\n    </Container>\n  );\n};\n\nexport default UserInfo;","export const selectTheme = (state) => state.theme;","import styled from 'styled-components';\n\nexport const SidebarBlock = styled.aside`\n  width: 260px;\n  min-height: 100vh;\n  padding: 24px;\n  // background-color: #121212\n\n  &.theme-light {\n    background-color: #ffffff;\n    color: #161616;\n  }\n\n  &.theme-dark {\n    background-color: #121212;\n    color: #ffffff;\n  }\n\n  &.theme-violet {\n    background-color: #5255bc;\n  }\n\n  @media (min-width: 1400px) {\n    display: none;\n  }\n`;\n\nexport const TitleBlock = styled.div`\n  display: flex;\n  align-items: center;\n  margin-bottom: 60px;\n`;\n\nexport const MyBoardTitle = styled.p`\n  color: rgba(255, 255, 255, 0.5);\n  margin-bottom: 8px;\n  font-size: 12px;\n  letter-spacing: -0.24px;\n`;\n\nexport const HelpContent = styled.p`\n  // color: #FFF;\n  line-height: 20px;\n  letter-spacing: -0.28px;\n\n  &.theme-light {\n    color: #161616;\n  }\n\n  &.theme-dark {\n    color: #ffffff;\n  }\n\n  &.theme-violet {\n    color: #ffffff;\n  }\n`;\n\nexport const Title = styled.h3`\n  color: #ffffff;\n  text-shadow: 0px 4px 4px 0px rgba(0, 0, 0, 0.25);\n  font-weight: 600;\n  letter-spacing: -0.64px;\n`;\n\nexport const BoardTitleBlock = styled.div`\n  border-top: 1px solid #1f1f1f;\n  border-bottom: 1px solid #1f1f1f;\n  padding: 14px 0;\n  color: #ffffff;\n  font-weight: 500;\n  letter-spacing: -0.28px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 40px;\n`;\n\nexport const SvgAdd = styled.svg`\n  width: 40px;\n  height: 36px;\n  border-radius: 6px;\n  background: #bedbb0;\n  stroke: #121212;\n`;\n\nexport const SvgLightning = styled.svg`\n  width: 32px;\n  height: 32px;\n  margin-right: 8px;\n  border-radius: 6px;\n  fill: #ffffff;\n  background: #1f1f1f;\n`;\n\nexport const SvgHelp = styled.svg`\n  stroke: #ffffff;\n  width: 20px;\n  height: 20px;\n  margin-right: 8px;\n`;\n\nexport const NeedHelpBlock = styled.div`\n  // background-color: #1F1F1F;\n  border-radius: 8px;\n  margin-bottom: 24px;\n  padding: 20px;\n\n  &.theme-light {\n    background-color: #f6f6f7;\n    color: #161616;\n  }\n\n  &.theme-dark {\n    background-color: #1f1f1f;\n    color: #ffffff;\n  }\n\n  &.theme-violet {\n    background-color: rgba(236, 237, 253, 0.4);\n    color: #ffffff;\n  }\n\n  @media (max-width: 768px) {\n    display: none;\n  }\n`;\n\nexport const NeedHelpButton = styled.button`\n  display: flex;\n  align-items: center;\n  background-color: transparent;\n  color: #fff;\n  border: none;\n  margin-top: 20px;\n  padding: 0;\n`;\n\nexport const LogoutBtn = styled.button`\n  display: flex;\n  align-items: center;\n  font-size: 16px;\n  font-weight: 500;\n  background-color: transparent;\n  color: #fff;\n  border: none;\n  padding: 0;\n`;\n\nexport const Flower = styled.img`\n  margin-bottom: 14px;\n  display: block;\n`;\n","import * as yup from 'yup';\n\nexport const HelpSchema = yup.object().shape({\n  email: yup.string().email('Invalid email format').required('Email is required').matches(\n    /^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}$/,\n    'Invalid email format'\n  ),\n  comment: yup.string().min(10, 'Comment must be at least 10 characters').max(500, 'Name must be no more than 500 characters').required('Comment is required'),\n});","import { Formik, ErrorMessage, Field, Form } from 'formik';\nimport { HelpSchema } from 'schemas/helpSchema';\n\nconst initialValues = {\n  name: '',\n  email: '',\n};\n\nconst NeedHelpForm = () => {\n  const handleSubmit = evt => {};\n\n  return (\n    <div>\n      <Formik\n        initialValues={initialValues}\n        validationSchema={HelpSchema}\n        onSubmit={handleSubmit}\n      >\n        {({ errors, touched, submitCount }) => (\n          <Form autoComplete=\"off\">\n            <Field\n              type=\"email\"\n              name=\"email\"\n              placeholder=\"Email address\"\n              style={{\n                width: 300,\n                height: 49,\n              }}\n            />\n            <ErrorMessage name=\"email\" />\n            <div>\n              <Field\n                component=\"textarea\"\n                name=\"comment\"\n                placeholder=\"Comment\"\n                style={{\n                  width: 300,\n                  height: 120,\n                  resize: 'none',\n                }}\n              />\n              <ErrorMessage name=\"comment\" />\n              {submitCount > 0 &&\n                errors.comment &&\n                (!touched.comment || touched.comment) && (\n                  <div>Please enter a comment</div>\n                )}\n            </div>\n            <button type=\"submit\">Send</button>\n          </Form>\n        )}\n      </Formik>\n    </div>\n  );\n};\n\nexport default NeedHelpForm;\n","import PropTypes from 'prop-types';\nimport Modal from '../Modal/Modal';\nimport NeedHelpForm from './NeedHelpForm';\n\nconst NeedHelpModal = ({ closeModal }) => {\n  const handleCloseModal = () => {\n    closeModal();\n  };\n\n  return (\n    <div>\n      <Modal isOpen={true} handleClose={handleCloseModal} heading={'Need help'}>\n        <NeedHelpForm />\n      </Modal>\n    </div>\n  );\n};\n\nexport default NeedHelpModal;\n\nNeedHelpModal.propTypes = {\n  closeModal: PropTypes.func.isRequired,\n};","import {\n  SvgAdd,\n  SvgLightning,\n  Title,\n  TitleBlock,\n  SidebarBlock,\n  BoardTitleBlock,\n  MyBoardTitle,\n  NeedHelpBlock,\n  NeedHelpButton,\n  SvgHelp,\n  HelpContent,\n  LogoutBtn,\n  Flower,\n} from './Sidebar.styled';\nimport sprite from '../../images/sprite.svg';\nimport flower from '../../images/flower.png';\nimport { useState } from 'react';\nimport NeedHelpModal from 'components/NeedHelp/NeedHelpModal';\n\nexport function Sidebar({ theme, isOpen }) {\n  const [isShow, setIsShow] = useState(false);\n\n  const showModal = () => {\n    setIsShow(true);\n  };\n\n  const closeModal = () => {\n    setIsShow(false);\n  };\n\n  return (\n    <SidebarBlock className={`theme-${theme} ${isOpen ? 'open' : 'closed'}`}>\n      <TitleBlock>\n        <SvgLightning>\n          <use href={`${sprite}#icon-lightning`} />\n        </SvgLightning>\n        <Title>Task Pro</Title>\n      </TitleBlock>\n\n      <MyBoardTitle>My boards</MyBoardTitle>\n      <BoardTitleBlock>\n        <createBoardTitle>\n          <p>Create a new board</p>\n        </createBoardTitle>\n\n        <SvgAdd>\n          <use href={`${sprite}#icon-plus`} />\n        </SvgAdd>\n      </BoardTitleBlock>\n\n      <NeedHelpBlock className={`theme-${theme}`}>\n        <Flower src={flower} alt=\"flower\" />\n\n        <HelpContent>\n          If you need help with TaskPro, check out our support resources or\n          reach out to our customer support team.\n        </HelpContent>\n\n        <NeedHelpButton type=\"button\" name=\"help\" onClick={showModal}>\n          <SvgHelp>\n            <use href={`${sprite}#icon-help`} />\n          </SvgHelp>\n          Need help?\n        </NeedHelpButton>\n\n        {isShow && <NeedHelpModal closeModal={closeModal} />}\n\n      </NeedHelpBlock>\n\n      <LogoutBtn type=\"button\" name=\"logout\">\n        Log out\n      </LogoutBtn>\n    </SidebarBlock>\n  );\n}\n","import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  width: auto;\n  max-width: 100%;\n  color: #ffffff;\n  height: 68px;\n  padding: 14px 20px;\n\n  &.theme-light {\n    background-color: #fcfcfc;\n    color: #161616;\n  }\n\n  &.theme-dark {\n    background-color: #161616;\n    color: #ffffff;\n  }\n\n  &.theme-violet {\n    background-color: #fff;\n    color: #161616;\n  }\n\n  @media (max-width: 1440px) {\n    padding: 18px 32px;\n  }\n  @media (max-width: 768px) {\n    padding: 18px 24px;\n  }\n`;\n\nexport const HeaderNav = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\nexport const MenuIcon = styled.svg`\n  width: 24px;\n  height: 24px;\n\n  &.theme-light {\n    fill: #161616;\n  }\n\n  &.theme-dark {\n    fill: #ffffff;\n  }\n\n  &.theme-violet {\n    fill: #161616;\n  }\n\n  @media screen and (min-width: 375px) {\n    width: 32px;\n    height: 32px;\n  }\n\n  @media (min-width: 768px) {\n    display: none;\n  }\n`;\n\nexport const HeaderWrap = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 14px;\n`;\n\nexport const SelectIcon = styled.svg`\n  width: 16px;\n  height: 16px;\n  margin-left: 4px;\n`;\n","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport UserInfo from 'components/UserInfo/UserInfo';\nimport { setTheme } from 'redux/theme/themeSlice';\nimport { selectTheme } from 'redux/theme/selectors';\nimport { Sidebar } from 'components/Sidebar/Sidebar';\nimport {\n  Container,\n  HeaderNav,\n  MenuIcon,\n  SelectIcon,\n  HeaderWrap,\n} from './Header.styled';\nimport Sprite from '../../images/sprite.svg';\n\nconst Header = ({ onToggleMenu }) => {\n  const dispatch = useDispatch();\n  const theme = useSelector(selectTheme);\n  const [isOptionListOpen, setOptionListOpen] = useState(false);\n  const [isSideBarOpen, setSideBarOpen] = useState(false);\n\n  const toggleOptionList = () => {\n    setOptionListOpen(!isOptionListOpen);\n  };\n\n  const sendThemeToBackend = (newTheme) => {\n    \n  };\n\n  const onToggleTheme = (event) => {\n    const newTheme = event.target.value;\n    dispatch(setTheme(newTheme));\n    sendThemeToBackend(newTheme);\n  };\n\n  const toggleSideBar = () => {\n    setSideBarOpen(!isSideBarOpen); \n  };\n\n   return (\n    <Container className={`theme-${theme}`}>\n      <div onClick={toggleSideBar}>\n        <MenuIcon className={`icon-menu theme-${theme}`} width=\"32\" height=\"32\">\n          <use href={`${Sprite}#icon-menu`} />\n        </MenuIcon>\n      </div>\n      <HeaderWrap>\n        <HeaderNav onClick={toggleOptionList} value={theme}>\n          <div>\n            <SelectIcon><use href={`${Sprite}#icon-chevron-down`} /></SelectIcon>\n          </div>\n          Theme\n        </HeaderNav>\n        <select value={theme} onChange={onToggleTheme}>\n          <option value=\"light\">Light</option>\n          <option value=\"dark\">Dark</option>\n          <option value=\"violet\">Violet</option>\n        </select>\n        <UserInfo />\n      </HeaderWrap>\n      {isSideBarOpen && <Sidebar theme={theme} isOpen={isSideBarOpen} className={`theme-${theme}`}/>}\n    </Container>\n  );\n};\n\nexport default Header;\n\n","export const HeaderDashboard = () => {\n  return (\n    <div\n      style={{\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'space-around',\n        height: '80px',\n        backgroundColor: 'lightgray',\n        widows: '100%',\n      }}\n    >\n      <p>Name Board</p>\n\n      <p>Filters logic</p>\n    </div>\n  );\n};\n","import styled from '@emotion/styled';\nimport { Draggable } from 'react-beautiful-dnd';\n\nconst Container = styled.div`\n  border: 1px solid lightgray;\n  border-radius: 2px;\n  padding: 8px;\n  margin: 8px;\n  background-color: ${props => (props.isDragging ? 'lightgreen' : 'white')};\n\n  /* display: flex; */\n  gap: 10px;\n`;\n\nconst Handle = styled.div`\n  width: 20px;\n  height: 20px;\n  background-color: orange;\n  border-radius: 4px;\n`;\n\nexport const Task = ({ task, index }) => {\n  return (\n    <Draggable draggableId={task.id} index={index}>\n      {(provided, snapshot) => (\n        <Container\n          {...provided.draggableProps}\n          {...provided.dragHandleProps}\n          ref={provided.innerRef}\n          isDragging={snapshot.isDragging}\n        >\n          {/* <button onClick={() => console.log('awdawd')}></button> */}\n          <Handle />\n          <p>{task.title}</p>\n          <p>{task.description}</p>\n          <p>{task.priority}</p>\n          <p>{task.deadline}</p>\n        </Container>\n      )}\n    </Draggable>\n  );\n};\n","import { useState } from 'react';\nimport styled from '@emotion/styled';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { Droppable, Draggable } from 'react-beautiful-dnd';\nimport { Task } from 'components/Task/Task';\n\nconst Container = styled.div`\n  margin: 8px;\n  border: 1px solid lightgrey;\n  border-radius: 2px;\n  background-color: white;\n  width: 220px;\n\n  display: flex;\n  flex-direction: column;\n`;\n\nconst Title = styled.h3`\n  padding: 8px;\n`;\n\nconst TaskList = styled.div`\n  padding: 8px;\n  transition: background-color 0.2s ease;\n  background-color: ${props => (props.isDraggingOver ? 'skyblue' : 'inherit')};\n\n  flex-grow: 1;\n  min-height: 100px;\n`;\n\nconst ContainerModal = styled.div`\n  width: 200px;\n  height: 300px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n\n  background-color: #beb7b7;\n\n  position: absolute;\n  z-index: 999;\n  left: 800px;\n  top: 200px;\n`;\n\nexport const Column = ({ column, tasks, index, cardData, setCardData }) => {\n  const [visible, setVisible] = useState(false);\n  const [dataForModal, setDataForModal] = useState(column);\n  const [titleTask, setTitleTask] = useState('');\n\n  if (true === false) {\n    console.log(setDataForModal);\n  }\n\n  const hendleVisible = () => {\n    setVisible(!visible);\n  };\n\n  const handleSubmit = () => {\n    const taskId = `1${uuidv4().replace(/-/g, '')}`;\n\n    const newTask = {\n      [taskId]: {\n        id: taskId,\n        title: titleTask,\n        description: 'awdawd',\n        priority: 'over',\n        deadline: '22.33.44',\n      },\n    };\n\n    const columnId = dataForModal.id;\n\n    const newColumn = {\n      ...cardData.columns[columnId],\n      taskIds: [...cardData.columns[columnId].taskIds, taskId],\n    };\n\n    setCardData(prevCardData => ({\n      ...prevCardData,\n      tasks: {\n        ...prevCardData.tasks,\n        ...newTask,\n      },\n      columns: {\n        ...prevCardData.columns,\n        [columnId]: newColumn,\n      },\n    }));\n\n    hendleVisible();\n  };\n\n  return (\n    <Draggable draggableId={column.id} index={index}>\n      {provided => (\n        <Container {...provided.draggableProps} ref={provided.innerRef}>\n          <Title {...provided.dragHandleProps}>{column.title}</Title>\n          <Droppable droppableId={column.id} type=\"task\">\n            {(provided, snapshot) => (\n              <TaskList\n                ref={provided.innerRef}\n                {...provided.droppableProps}\n                isDraggingOver={snapshot.isDraggingOver}\n              >\n                {tasks.map((task, index) => (\n                  <Task key={task.id} task={task} index={index} />\n                ))}\n                {provided.placeholder}\n              </TaskList>\n            )}\n          </Droppable>\n          <button onClick={hendleVisible}>Add another card</button>\n\n          {visible && (\n            <ContainerModal>\n              Add Task\n              <label>\n                Task title\n                <input\n                  type=\"text\"\n                  value={titleTask}\n                  onChange={e => {\n                    setTitleTask(e.target.value);\n                  }}\n                />\n              </label>\n              <button type=\"submit\" onClick={handleSubmit}>\n                Add Task\n              </button>\n            </ContainerModal>\n          )}\n        </Container>\n      )}\n    </Draggable>\n  );\n};\n","import { useState } from 'react';\nimport styled from '@emotion/styled';\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { Column } from 'components/Column/Column';\n\nconst Container = styled.div`\n  display: flex;\n\n  position: relative;\n`;\n\nconst ContainerModal = styled.div`\n  width: 200px;\n  height: 300px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n\n  background-color: #beb7b7;\n\n  position: absolute;\n  z-index: 999;\n  left: 50%;\n  top: 50%;\n`;\n\nexport const MainDashboard = ({ cardData, setCardData }) => {\n  // кто будет делать этот блок, обратите внимание что именно приходит в cardData\n\n  const [visible, setVisible] = useState(false);\n  const [titleColumn, setTitleColumn] = useState('');\n\n  const hendleVisible = () => {\n    setVisible(!visible);\n  };\n\n  const handleSubmit = () => {\n    const columnId = `2${uuidv4().replace(/-/g, '')}`;\n\n    const newColumn = {\n      [columnId]: {\n        id: columnId,\n        title: titleColumn,\n        taskIds: [],\n      },\n    };\n\n    setCardData({\n      ...cardData,\n      columns: {\n        ...cardData.columns,\n        ...newColumn,\n      },\n      columnOrder: [...cardData.columnOrder, ...[columnId]],\n    });\n\n    hendleVisible();\n  };\n\n  // Эти три функции ниже отвечают за главный функционал переставления карточек между колонками и в колонках\n  // а так же за анимацию при их передвижение\n  const onDragStart = () => {\n    document.body.style.color = 'orange';\n    document.body.style.transition = 'background-color 0.2s ease';\n  };\n\n  const onDragUpdate = update => {\n    const { destination } = update;\n    const opacity = destination\n      ? destination.index / Object.keys(cardData.tasks).length\n      : 0;\n\n    document.body.style.backgroundColor = `rgba(153, 141, 217, ${opacity})`;\n  };\n\n  const onDragEnd = result => {\n    document.body.style.color = 'inherit';\n    document.body.style.backgroundColor = 'inherit';\n\n    const { destination, source, draggableId, type } = result;\n\n    if (!destination) {\n      return;\n    }\n\n    if (\n      destination.droppableId === source.droppableId &&\n      destination.index === source.index\n    ) {\n      return;\n    }\n\n    if (type === 'column') {\n      const newColumnOrder = Array.from(cardData.columnOrder);\n      newColumnOrder.splice(source.index, 1);\n      newColumnOrder.splice(destination.index, 0, draggableId);\n\n      const newState = {\n        ...cardData,\n        columnOrder: newColumnOrder,\n      };\n\n      setCardData(newState);\n\n      return;\n    }\n\n    const start = cardData.columns[source.droppableId];\n    const finish = cardData.columns[destination.droppableId];\n\n    if (start === finish) {\n      const newTaskId = Array.from(start.taskIds);\n      newTaskId.splice(source.index, 1);\n      newTaskId.splice(destination.index, 0, draggableId);\n\n      const newColumn = {\n        ...start,\n        taskIds: newTaskId,\n      };\n\n      const newState = {\n        ...cardData,\n        columns: {\n          ...cardData.columns,\n          [newColumn.id]: newColumn,\n        },\n      };\n\n      console.log(newState);\n\n      setCardData(newState);\n      return;\n    }\n\n    const startTaskIds = Array.from(start.taskIds);\n    startTaskIds.splice(source.index, 1);\n    const newStart = {\n      ...start,\n      taskIds: startTaskIds,\n    };\n\n    const finishTaskIds = Array.from(finish.taskIds);\n    finishTaskIds.splice(destination.index, 0, draggableId);\n\n    const newFinish = {\n      ...finish,\n      taskIds: finishTaskIds,\n    };\n\n    const newState = {\n      ...cardData,\n      columns: {\n        ...cardData.columns,\n        [newStart.id]: newStart,\n        [newFinish.id]: newFinish,\n      },\n    };\n\n    setCardData(newState);\n  };\n\n  return (\n    <div style={{ display: 'flex' }}>\n      <DragDropContext\n        onDragStart={onDragStart}\n        onDragUpdate={onDragUpdate}\n        onDragEnd={onDragEnd}\n      >\n        <Droppable\n          droppableId=\"all-columns\"\n          direction=\"horizontal\"\n          type=\"column\"\n        >\n          {provided => (\n            <Container {...provided.droppableProps} ref={provided.innerRef}>\n              {cardData.columnOrder.map((columnId, index) => {\n                const column = cardData.columns[columnId];\n                const tasks = column.taskIds.map(\n                  taskId => cardData.tasks[taskId]\n                );\n\n                return (\n                  <Column\n                    key={column.id}\n                    column={column}\n                    tasks={tasks}\n                    index={index}\n                    cardData={cardData}\n                    setCardData={setCardData}\n                  />\n                );\n              })}\n              {provided.placeholder}\n            </Container>\n          )}\n        </Droppable>\n      </DragDropContext>\n\n      <button\n        style={{ height: '50px', width: '200px' }}\n        onClick={hendleVisible}\n      >\n        Add another card\n      </button>\n\n      {visible && (\n        <ContainerModal>\n          Add Column\n          <label>\n            Column title\n            <input\n              type=\"text\"\n              value={titleColumn}\n              onChange={e => {\n                setTitleColumn(e.target.value);\n              }}\n            />\n          </label>\n          <button type=\"submit\" onClick={handleSubmit}>\n            Add Column\n          </button>\n        </ContainerModal>\n      )}\n    </div>\n  );\n};\n","export const initialUserModel = {\n  username: 'Best User',\n  email: 'bestUser@gmail.com',\n  password: 'qwerty',\n  avatarURL: '',\n  token: '',\n  theme: 'LIGHT',\n  boards: [\n    {\n      id: '329bbadef31894837aed37f3a6843c396',\n      title: 'Best board',\n      icon: 'vector',\n      background: 'forest',\n      boardsData: {\n        tasks: {\n          '19f0d88c3a50a45f0aa8a111c4dfdd70f': {\n            id: '19f0d88c3a50a45f0aa8a111c4dfdd70f',\n            title: 'Add tasks',\n            description: 'Figure out what to do',\n            priority: 'priority',\n            deadline: '15:00 15.08.2023',\n          },\n          '176d3b628c5f44bff97861b5b083a3ff0': {\n            id: '176d3b628c5f44bff97861b5b083a3ff0',\n            title: 'Create a repository',\n            description: 'Instruct someone to create a project repositoryo',\n            priority: 'priority',\n            deadline: '15:00 15.08.2023',\n          },\n        },\n        columns: {\n          '25028b3f295854125bb413ce1a484c0c8': {\n            id: '25028b3f295854125bb413ce1a484c0c8',\n            title: 'To do',\n            taskIds: [\n              '19f0d88c3a50a45f0aa8a111c4dfdd70f',\n              '176d3b628c5f44bff97861b5b083a3ff0',\n            ],\n          },\n          '2622aab9120e046c3971cb4de36555e64': {\n            id: '2622aab9120e046c3971cb4de36555e64',\n            title: 'In progress',\n            taskIds: [],\n          },\n        },\n        columnOrder: [\n          '25028b3f295854125bb413ce1a484c0c8',\n          '2622aab9120e046c3971cb4de36555e64',\n        ],\n      },\n    },\n  ],\n};\n","import { useState } from 'react';\n\nimport { HeaderDashboard } from 'components/HeaderDashboard/HeaderDashboard';\nimport { MainDashboard } from 'components/MainDashboard/MainDashboard';\nimport { initialUserModel } from 'schemas/initialUserModal';\n\nexport const Dashboard = () => {\n  // в cardData я поместил именно обект boardsData отдельной boards\n  const [cardData, setCardData] = useState(\n    initialUserModel.boards[0].boardsData\n  );\n\n  return (\n    <div>\n      <HeaderDashboard />\n      <MainDashboard cardData={cardData} setCardData={setCardData} />\n    </div>\n  );\n};\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { ThemeProvider } from 'hooks/themeContext';\nimport Header from 'components/Header/Header';\nimport { Sidebar } from 'components/Sidebar/Sidebar';\nimport { Dashboard } from 'components/Dashboard/Dashboard';\nimport { selectTheme } from 'redux/theme/selectors';\n\nconst HomePage = () => {\n  const theme = useSelector(selectTheme);\n  return (\n    <ThemeProvider>\n      <Header theme={theme}/>\n      <div style={{ display: 'flex' }}>\n        <Sidebar theme={theme}/>\n        <Dashboard theme={theme}/>\n      </div>\n    </ThemeProvider>\n  );\n};\n\nexport default HomePage;\n"],"names":["Backdrop","styled","_templateObject","_taggedTemplateLiteral","ModalWindow","_templateObject2","Heading","_templateObject3","CloseBtn","_templateObject4","_ref","children","isOpen","handleClose","heading","window","addEventListener","event","key","ReactDOM","_jsx","onClick","_jsxs","e","stopPropagation","xlinkHref","concat","Sprite","document","getElementById","Container","Avatar","EditProfileModal","ModalCloseButton","FormBox","Form","FieldUser","Field","_templateObject5","PhotoInputWrapper","_templateObject6","AvatarImage","_templateObject7","SaveBtn","_templateObject8","FileInput","_templateObject9","IconPlus","_templateObject10","IconUserWrapper","_templateObject11","onClose","_useSelector","useSelector","state","profile","photo","name","email","password","dispatch","useDispatch","handleFormSubmit","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","values","wrap","_context","prev","next","updateProfileData","stop","_x","apply","arguments","handleAvatarClick","click","Formik","initialValues","newPhoto","newName","newEmail","newPassword","onSubmit","_ref3","isSubmitting","setFieldValue","_Fragment","src","alt","width","height","href","className","id","type","onChange","URL","createObjectURL","currentTarget","files","ErrorMessage","component","disabled","_React$useState","React","_React$useState2","_slicedToArray","isModalOpen","setModalOpen","EditProfile","selectTheme","theme","SidebarBlock","TitleBlock","MyBoardTitle","HelpContent","Title","BoardTitleBlock","SvgAdd","SvgLightning","SvgHelp","NeedHelpBlock","NeedHelpButton","LogoutBtn","_templateObject12","Flower","_templateObject13","HelpSchema","yup","shape","required","matches","comment","min","max","validationSchema","evt","errors","touched","submitCount","autoComplete","placeholder","style","resize","closeModal","Modal","NeedHelpForm","Sidebar","_useState","useState","_useState2","isShow","setIsShow","sprite","NeedHelpModal","HeaderNav","MenuIcon","HeaderWrap","SelectIcon","onToggleMenu","isOptionListOpen","setOptionListOpen","_useState3","_useState4","isSideBarOpen","setSideBarOpen","value","newTheme","target","setTheme","UserInfo","HeaderDashboard","display","alignItems","justifyContent","backgroundColor","widows","props","isDragging","Handle","Task","task","index","Draggable","draggableId","provided","snapshot","_objectSpread","draggableProps","dragHandleProps","ref","innerRef","title","description","priority","deadline","TaskList","isDraggingOver","ContainerModal","Column","column","tasks","cardData","setCardData","visible","setVisible","dataForModal","_useState5","_useState6","titleTask","setTitleTask","hendleVisible","handleSubmit","taskId","uuidv4","replace","newTask","_defineProperty","columnId","newColumn","columns","taskIds","_toConsumableArray","prevCardData","Droppable","droppableId","droppableProps","map","MainDashboard","titleColumn","setTitleColumn","DragDropContext","onDragStart","body","color","transition","onDragUpdate","update","destination","opacity","Object","keys","length","onDragEnd","result","_objectSpread3","source","start","finish","newTaskId","Array","from","splice","newState","console","log","startTaskIds","newStart","finishTaskIds","newFinish","newColumnOrder","columnOrder","direction","initialUserModel","icon","background","boardsData","Dashboard","ThemeProvider","Header"],"sourceRoot":""}