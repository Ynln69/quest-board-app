{"version":3,"file":"static/js/204.dcb985fe.chunk.js","mappings":"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","sources":["components/UserInfo/UserInfo.styled.jsx","components/Modal/Modal.styles.js","components/Modal/Modal.jsx","components/EditProfile/EditProfile.styled.jsx","components/EditProfile/EditProfile.jsx","components/EditProfile/EditProfileModal.jsx","components/UserInfo/UserInfo.jsx","components/Sidebar/Sidebar.styled.jsx","components/Button/Button.jsx","components/NeedHelp/NeedHelp.styled.js","schemas/helpSchema.js","components/NeedHelp/NeedHelpForm.jsx","components/NeedHelp/NeedHelpModal.jsx","redux/boards/boardsSelectors.js","schemas/addBoardSchema.js","components/ModalBoard/ModalBoard.styles.js","components/ModalBoard/ModalBoard.jsx","components/ModalBoard/index.js","components/Sidebar/Sidebar.jsx","components/ThemeSelector/ThemeSelector.styled.jsx","components/ThemeSelector/ThemeSelector.jsx","components/Header/Header.styled.jsx","components/Header/Header.jsx","components/HeaderDashboard/HeaderDashboard.styled.js","components/HeaderDashboard/HeaderDashboard.jsx","components/Task/Task.styled.js","components/Task/Task.jsx","components/Column/BtnColumn/BtnColumn.styled.js","components/Column/BtnColumn/BtnColumn.jsx","components/Column/ModalColumn/ModalColumn.styled.js","components/Column/ModalColumn/ModalColumn.jsx","components/Column/AddColumn/AddColumn.jsx","components/Column/Column.styled.jsx","components/Column/Column.jsx","components/MainDashboard/MainDashboard.styled.js","components/MainDashboard/MainDashboard.jsx","schemas/initialUserModal.js","components/Dashboard/Dashboard.styled.js","components/Dashboard/Dashboard.jsx","pages/HomePage/HomePage.styled.js","pages/HomePage/HomePage.jsx","images/backgrounds|sync|/^/.//.*/.jpg$"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Container = styled.div`\ndisplay: flex;\nalign-items: center;\ngap: 8px;\nmargin-left: 14px;\n`;\n\nexport const Avatar = styled.img`\n  width: 32px;\n  height: 32px;\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-position: center;\n  cursor: pointer;\n    `;\n\n   export const UserIcon = styled.svg`\n  width: 32px;\n  height: 32px;\n  cursor: pointer;\n  stroke: transparent;\n  \n   `;","import styled from '@emotion/styled';\n\nexport const Backdrop = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n\n  width: 100%;\n  height: 100%;\n\n  background-color: rgba(21, 21, 21, 0.3);\n  transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n`;\n\nexport const ModalWindow = styled.div`\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  width: 100%;\n  padding: 24px;\n\n  border-radius: 8px;\n  box-shadow: 0px 4px 16px 0px rgba(22, 22, 22, 0.05);\n  transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  background-color: var(--modal_bgc);\n\n  @media screen and (min-width: 375px) {\n    width: 335px;\n  }\n  @media screen and (min-width: 768px) {\n    width: 400px;\n  }\n`;\n\nexport const Heading = styled.h3`\n  margin-bottom: 24px;\n\n  color: var(--modal_main_color);\n  font-family: Poppins;\n  font-size: 18px;\n  font-style: normal;\n  font-weight: 500;\n  line-height: normal;\n  letter-spacing: -0.36px;\n`;\n\nexport const CloseBtn = styled.svg`\n  width: 18px;\n  height: 18px;\n  position: absolute;\n  right: 14px;\n  top: 14px;\n  border-radius: 50%;\n  background-color: transparent;\n  cursor: pointer;\n  transition: background-color 250ms ease-in;\n  stroke: var(--close_icon);\n\n  &:hover,\n  :focus {\n    stroke: var(--close_active);\n  }\n`;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport Sprite from '../../images/sprite.svg';\nimport { Backdrop, CloseBtn, Heading, ModalWindow } from './Modal.styles';\n\nfunction Modal({ children, isOpen, handleClose, heading }) {\n  if (!isOpen) return null;\n\n  document.body.style.overflow = isOpen ? 'hidden' : 'visible';\n\n  const handleKeyDown = event => {\n    if (event.key === 'Escape') {\n      handleClose();\n    }\n  };\n\n  if (isOpen) {\n    window.addEventListener('keydown', handleKeyDown);\n  }\n\n  return ReactDOM.createPortal(\n    <Backdrop onClick={handleClose}>\n      <ModalWindow onClick={e => e.stopPropagation()}>\n        <Heading>{heading}</Heading>\n        <CloseBtn onClick={handleClose}>\n          <use xlinkHref={`${Sprite}#icon-x-close`} />\n        </CloseBtn>\n        <div>{children}</div>\n      </ModalWindow>\n    </Backdrop>,\n    document.getElementById('modal-root')\n  );\n}\nexport default Modal;\n","import styled from '@emotion/styled';\nimport { Form, Field } from 'formik';\n\nexport const EditProfileModal = styled.div`\n// position: absolute;\n// top: 50%;\n// left: 50%;\n// transform: translate(-50%, -50%);\n// width: 100%;\n// padding: 24px;\n\n// border-radius: 8px;\n// box-shadow: 0px 2px 4px 0px rgba(22, 22, 22, 1);\n// // transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n// background-color: var(--modal_bgc);\n\n// cubic-bezier(0.4, 0, 0.2, 1)\n//  @media screen and (min-width: 375px) {\n//   width: 335px;\n// }\n// @media screen and (min-width: 768px) {\n//   width: 400px;\n`;\n\nexport const FormBox = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  gap: 14px;\n   font-size: 14px;\n  font-weight: 400;\n  letter-spacing: -0.28px;\n`;\n\nexport const LabelPass = styled.label`\nposition: relative;\nwidth:100%;\n`;\n\nexport const LabelText = styled.label`\nwidth:100%;\n`;\n\nexport const FieldUser = styled(Field)`\n  width:100%;\n    height: 49px;\n    color: var(--modal_main_color);\n    background-color: var(--modal_field);\n    opacity: 0.4;\n    border: 1px solid #bedbb0;\n    padding-left: 18px;\n    box-shadow: 0px 4px 16px rgba(22, 22, 22, 0.08);\n    border-radius: 8px;\n\n    outline: none;\n    transition: all 500ms;\n\n    &:hover,\n    &:focus,\n    &:active {\n      opacity: 1;\n      box-shadow: 0px 4px 16px 0px rgba(22, 22, 22, 0.08);\n    }\n`;\n\nexport const IconUserWrapper = styled.label`\n  width: 68px;\n  height: 78px;\n  position: relative;\n  margin: 24px auto 25px;\n  border-radius: 8px;\n  background-position: center;\n  cursor: pointer;\n\n  // &:hover,\n  // &:focus,\n  // &:active {\n  //   opacity: 1;\n  //   box-shadow: 0px 4px 16px 0px rgba(22, 22, 22, 0.08);\n  // }\n`;\n\nexport const AvatarImage = styled.img`\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n`;\n\nexport const SaveBtn = styled.button`\n  width: 100%;\n  height: 49px;\n  margin-top: 24px;\n  text-align: center;\n  font-family: Poppins;\n  font-size: 14px;\n  font-style: normal;\n  font-weight: 500;\n  line-height: normal;\n  letter-spacing: -0.28px;\n  background: var(--create_normal);\n  border-radius: 8px;\n  border: 1px solid var(--create_normal);\n  cursor: pointer;\n\n  // &:hover,\n  // &:focus,\n  // &:active {\n  //   background: var(--create_active);\n    // }\n\n    &:hover,\n  &:focus,\n  &:active {\n      opacity: 0.8;\n    }\n\n  @media screen and (max-width: 768px) {\n    width: 250px;\n  }\n`;\n\nexport const FileInput = styled.input`\n  position: absolute;\n  opacity: 0;\n  display: none;\n  width:100%\n`;\n\nexport const NoneInput = styled.input`\n  display: none;\n`;\n\nexport const PlusBtn = styled.button`\n  position: absolute;\n  bottom: -15%;\n  left: 30%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border-radius: 8px;\n\n  width: 28px;\n  height: 28px;\n  border: none;\n  background: var(--user_bgc);\n\n  transition: all 150ms linear;\n  cursor: pointer;\n\n  &:hover,\n  &:focus,\n  &:active  {\n    background: var(--create_active);\n  }\n`;\n\nexport const TextBtn = styled(Form)`\nfont-family: Poppins;\nfont-size: 14px;\nfont-style: normal;\nfont-weight: 500;\nline-height: normal;\nletter-spacing: -0.28px;\ncolor: var(--save-color);\n`;\n\nexport const IconPlus = styled.svg`\n  width: 14px;\n  height: 14px;\n  stroke: #161616; \n  z-index: 99;\n  `;\n\nexport const PasswordView = styled.span`\n  position: absolute;\n  right: 18px;\n  top: 19px;\n  cursor: pointer;\n`;\n\nexport const PasswordIcon = styled.img`\n  width: 16.5px;\n  height: 16px;\n  top: 50%;\n  right: 4px;\n  `;\n\nexport const Svg = styled.svg`\n  width: 16.5px;\n  height: 16px;\n  top: 50%;\n  right: 4px;\n  fill: transparent;\n`;\n\n","import React from 'react';\nimport { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Formik, ErrorMessage } from 'formik';\nimport {\n  EditProfileModal,\n  FormBox,\n  AvatarImage,\n  FieldUser,\n  NoneInput,\n  PlusBtn,\n  IconPlus,\n  IconUserWrapper,\n  SaveBtn,\n  PasswordView,\n  PasswordIcon,\n  Svg,\n  LabelPass,\n  LabelText,\n  TextBtn,\n} from './EditProfile.styled';\nimport { updateUser, updateUserAvatar } from 'redux/auth/operations';\nimport { selectUser } from 'redux/auth/selectors';\nimport Sprite from '../../images/sprite.svg';\nimport eyeHide from '../../images/eye-hide.svg';\n\nconst EditProfile = ({ onSave }) => {\n  const { username, email, password, avatarURL } = useSelector(selectUser);\n  const [showPassword, setShowPassword] = useState(false);\n  const [avatarNewURL, setAvatarNewURL] = useState(avatarURL);\n\n  const dispatch = useDispatch();\n\n  const togglePasswordVisibility = () => {\n    setShowPassword(!showPassword);\n  };\n\n  const handleFormSubmit = async values => {\n    console.log(values);\n\n    dispatch(\n      updateUser({\n        username: values.newName,\n        email: values.newEmail,\n        password: values.newPassword,\n      })\n    );\n\n    if (avatarNewURL !== values.newPhoto) {\n      dispatch(updateUserAvatar(avatarNewURL));\n    }\n    onSave();\n  };\n\n  const handleAvatarClick = e => {\n    const selectedFile = e.target.files[0];\n    if (selectedFile && selectedFile.type.startsWith('image/')) {\n      const formData = new FormData();\n      formData.append('avatar', selectedFile);\n      setAvatarNewURL(formData);\n    }\n  };\n\n  return (\n    <EditProfileModal>\n      <Formik\n        initialValues={{\n          newPhoto: avatarNewURL,\n          newName: username,\n          newEmail: email,\n          newPassword: password,\n        }}\n        onSubmit={handleFormSubmit}\n      >\n        {({ isSubmitting, values, setFieldValue }) => (\n          <FormBox>\n            <IconUserWrapper>\n              {values.newPhoto ? (\n                <AvatarImage\n                  type=\"file\"\n                  name=\"newPhoto\"\n                  alt=\"Avatar\"\n                  src={values.newPhoto}\n                />\n              ) : (\n                <svg className=\"icon-user\" width=\"68\" height=\"68\">\n                  <use href={`${Sprite}#icon-user`} />\n                </svg>\n              )}\n              <PlusBtn\n                onClick={() => document.getElementById('newPhotoInput').click()}\n              >\n                <IconPlus>\n                  <use href={`${Sprite}#icon-plus-us`} />\n                </IconPlus>\n                <NoneInput\n                  type=\"file\"\n                  id=\"newPhotoInput\"\n                  name=\"newPhoto\"\n                  onChange={event => {\n                    setFieldValue(\n                      'newPhoto',\n                      URL.createObjectURL(event.currentTarget.files[0])\n                    );\n                    handleAvatarClick(event);\n                  }}\n                />\n              </PlusBtn>\n            </IconUserWrapper>\n\n            <LabelText>\n              <FieldUser type=\"text\" name=\"newName\" />\n              <ErrorMessage name=\"newName\" component=\"div\" />\n            </LabelText>\n\n            <LabelText>\n              <FieldUser type=\"email\" name=\"newEmail\" />\n              <ErrorMessage name=\"newEmail\" component=\"div\" />\n            </LabelText>\n\n            <LabelPass>\n              <FieldUser\n                type={showPassword ? 'text' : 'password'}\n                id=\"password\"\n              />\n              <PasswordView onClick={togglePasswordVisibility}>\n                {showPassword ? (\n                  <PasswordIcon src={eyeHide} />\n                ) : (\n                  <Svg>\n                    <use stroke=\"gray\" href={`${Sprite}#eye-password`} />\n                  </Svg>\n                )}\n              </PasswordView>\n              <ErrorMessage name=\"newPassword\" component=\"div\" />\n            </LabelPass>\n\n            <SaveBtn type=\"submit\" disabled={isSubmitting}>\n              <TextBtn>Save</TextBtn>\n            </SaveBtn>\n          </FormBox>\n        )}\n      </Formik>\n    </EditProfileModal>\n  );\n};\n\nexport default EditProfile;\n","import Modal from 'components/Modal/Modal';\nimport EditProfile from './EditProfile';\n\nconst EditProfileModal = ({ onClose }) => {\n  const handleCloseModal = () => {\n    onClose();\n  };\n\n  return (\n    <div>\n      <Modal\n        isOpen={true}\n        handleClose={handleCloseModal}\n        heading={'Edit profile'}\n      >\n        <EditProfile onClose={handleCloseModal} />\n      </Modal>\n    </div>\n  );\n};\n\nexport default EditProfileModal;\n","import React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { Container, Avatar, UserIcon } from './UserInfo.styled';\nimport EditProfileModal from 'components/EditProfile/EditProfileModal';\nimport Sprite from '../../images/sprite.svg';\nimport { selectUser } from 'redux/auth/selectors';\n\nconst UserInfo = ({ theme }) => {\n  const { username, avatarURL } = useSelector(selectUser);\n  const [isEditProfileModalOpen, setIsEditProfileModalOpen] = useState(false);\n\n  const openEditProfileModal = () => {\n    setIsEditProfileModalOpen(true);\n  };\n\n  const closeEditProfileModal = () => {\n    setIsEditProfileModalOpen(false);\n  };\n\n  return (\n    <Container>\n      <div>{username}</div>\n      {avatarURL ? (\n        <Avatar\n          src={avatarURL}\n          alt=\"User Avatar\"\n          onClick={openEditProfileModal}\n        />\n      ) : (\n        <UserIcon\n          className={`icon-user theme-${theme}`}\n          onClick={openEditProfileModal}\n        >\n          <use href={`${Sprite}#icon-user`} />\n        </UserIcon>\n      )}\n      {isEditProfileModalOpen && <EditProfileModal onClose={closeEditProfileModal} />}\n         </Container>\n  );\n};\n\nexport default UserInfo;\n\n\n\n\n\n\n// import React from 'react';\n// import { useSelector } from 'react-redux';\n// import { Container, Avatar,  UserIcon  } from './UserInfo.styled';\n// import EditProfile from 'components/EditProfile/EditProfile';\n// import Sprite from '../../images/sprite.svg';\n\n// const setAvatarIcon = (activeUserTheme) => {\n//   switch (activeUserTheme) {\n//        case 'light':\n//       return '#icon-userlight';\n//       case 'dark':\n//       return '#icon-userdark';\n//     case 'violet':\n//       return '#icon-userviolet';\n//     default:\n//       return '#icon-userlight';\n//   }\n// };\n\n// const UserInfo = ({theme}) => {\n//   const { avatarURL, username } = useSelector(state => state.profile);\n//   const [isModalOpen, setModalOpen] = React.useState(false);\n\n//   const openModal = () => {\n//     setModalOpen(true);\n//   };\n\n//   const closeModal = () => {\n//     setModalOpen(false);\n//   };\n\n//   const avatarIcon = setAvatarIcon(theme);\n\n//   return (\n//     <Container>\n//       <div>{username}</div>\n//       {avatarURL ? (\n//         <Avatar src={avatarURL} alt=\"User Avatar\" onClick={openModal} />\n//       ) : (\n//         <UserIcon onClick={openModal}>\n//         <svg className={`icon-user`} width=\"32\" height=\"32\">\n//           <use href={Sprite + avatarIcon} />\n//         </svg>\n//       </UserIcon>\n//       )}\n//       {isModalOpen && <EditProfile onClose={closeModal} />}\n//     </Container>\n//   );\n// };\n\n// export default UserInfo;\n","import styled from '@emotion/styled';\n\nexport const SidebarBlock = styled.aside`\n  display: flex;\n  flex-direction: column;\n  width: 260px;\n  min-height: 100vh;\n  padding: 24px;\n\n  background-color: var(--nav_bgc);\n  color: var(--nav_main_color);\n  @media (max-width: 1439px) {\n    display: none;\n  }\n  &.open {\n    display: flex;\n    flex-direction: column;\n    position: absolute;\n    top: 0;\n    left: 0;\n    z-index: 1;\n  }\n`;\nexport const TitleBlock = styled.div`\n  display: flex;\n  align-items: center;\n  margin-bottom: 60px;\n`;\nexport const SvgLightning = styled.svg`\n  width: 32px;\n  height: 32px;\n  margin-right: 8px;\n  border-radius: 6px;\n`;\nexport const Title = styled.h3`\n  color: var(--nav_main_color);\n  text-shadow: 0px 4px 4px 0px rgba(0, 0, 0, 0.25);\n  font-family: Poppins;\n  font-weight: 600;\n  letter-spacing: -0.64px;\n`;\nexport const MyBoardTitle = styled.p`\n  margin-bottom: 8px;\n\n  color: var(--nav_second_color);\n  font-family: Poppins;\n  font-size: 12px;\n  letter-spacing: -0.24px;\n`;\nexport const BoardTitleBlock = styled.div`\n  display: flex;\n  gap: 50px;\n  align-items: center;\n  margin-bottom: 40px;\n  padding: 14px 0;\n  border-top: 1px solid var(--line_color);\n  border-bottom: 1px solid var(--line_color);\n\n  font-family: Poppins;\n  font-weight: 500;\n  letter-spacing: -0.28px;\n`;\nexport const ButtonAdd = styled.button`\n  width: 40px;\n  height: 36px;\n  display: flex;\n  align-items: center;\n  padding: 10px 8px;\n  border-radius: 6px;\n  border: none;\n\n  background-color: var(--create_normal);\n  &:hover {\n    background-color: var(--create_active);\n  }\n  > svg {\n    stroke: var(--create_plus_color);\n  }\n`;\nexport const BoardList = styled.li`\n  display: flex;\n  align-items: center;\n  font-weight: 500;\n  letter-spacing: -0.28px;\n`;\nexport const TitleBoard = styled.div`\n  display: flex;\n`;\nexport const BoardIcons = styled.div`\n  display: flex;\n  margin-left: auto;\n`;\nexport const EditIcon = styled.svg`\n  width: 16px;\n  height: 16px;\n  margin-right: 8px;\n\n  stroke: var(--nav_second_color)\n  &:last-child {\n    margin-right: 0;\n  }\n`;\n\nexport const NeedHelpBlock = styled.div`\n  border-radius: 8px;\n  margin-bottom: 24px;\n  padding: 20px;\n  margin-top: auto;\n\n  background-color: var(--need_bgc);\n  color: var(--nav_main_color);\n\n  @media (max-width: 768px) {\n    display: none;\n  }\n`;\n\nexport const HelpContent = styled.p`\n  line-height: 20px;\n  letter-spacing: -0.28px;\n  color: var(--nav_main_color);\n  > span {\n    color: var(--span_color);\n  }\n`;\nexport const NeedHelpButton = styled.button`\n  display: flex;\n  align-items: center;\n  background-color: transparent;\n  border: none;\n  margin-top: 20px;\n  padding: 0;\n\n  color: var(--nav_main_color);\n`;\nexport const SvgHelp = styled.svg`\n  stroke: var(--nav_main_color);\n  fill: rgba(0, 0, 0, 0);\n  width: 20px;\n  height: 20px;\n  margin-right: 8px;\n`;\nexport const LogoutBtn = styled.button`\n  display: flex;\n  align-items: center;\n  gap: 14px;\n  border: none;\n\n  color: var(--nav_main_color)\n  font-family: Poppins;\n  font-weight: 500;\n  font-size: 16px;\n  background-color: transparent;\n  padding: 0;\n  > svg {\n    stroke: var(--logout_fill);\n    &:hover {\n      stroke: var(--logout_fill_active);\n    }\n  }\n`;\n\nexport const Flower = styled.img`\n  margin-bottom: 14px;\n  display: block;\n`;\n","import styled from '@emotion/styled';\n\nexport const MainButton = styled.button`\n  width: 100%;\n\n  border-radius: 8px;\n  border: none;\n\n  padding: 14px;\n\n  color: var(--text_btn);\n  background: var(--normal_btn);\n  transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  font-family: 'Poppins';\n\n  &:hover {\n    background: var(--active_btn);\n    transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  }\n`;\n","import styled from '@emotion/styled';\nimport { Field } from 'formik';\n\nexport const Input = styled(Field)`\n  width: 100%;\n  margin-bottom: 14px;\n  padding: 14px 18px;\n  border-radius: 8px;\n  border: 1px solid var(--input_color);\n  outline: none;\n  opacity: 0.4;\n\n  color: var(--modal_main_color);\n  background-color: var(--modal_bgc);\n  font-family: Poppins;\n  font-weight: 400;\n  font-size: 14px;\n  line-height: normal;\n  letter-spacing: -0.28px;\n  &:hover,\n  &:focus,\n  &:active {\n    background-color: var(--modal_bgc);\n    opacity: 1;\n    box-shadow: 0px 4px 16px 0px rgba(22, 22, 22, 0.08);\n  }\n`;\n\nexport const Textarea = styled(Field)`\n  width: 100%;\n  height: 120px;\n  margin-bottom: 24px;\n  padding: 14px 18px;\n  border-radius: 8px;\n  border: 1px solid var(--input_color);\n  outline: none;\n  opacity: 0.4;\n\n  color: var(--modal_main_color);\n  background-color: var(--modal_bgc);\n  font-family: Poppins;\n  font-weight: 400;\n  font-size: 14px;\n  line-height: normal;\n  letter-spacing: -0.28px;\n  &:hover,\n  &:focus,\n  &:active {\n    opacity: 1;\n    box-shadow: 0px 4px 16px 0px rgba(22, 22, 22, 0.08);\n  }\n`;\n","import * as yup from 'yup';\n\nexport const HelpSchema = yup.object().shape({\n  email: yup.string().email('Invalid email format').required('Email is required').matches(\n    /^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}$/,\n    'Invalid email format'\n  ),\n  comment: yup.string().min(10, 'Comment must be at least 10 characters').max(500, 'Name must be no more than 500 characters').required('Comment is required'),\n});","import { Formik, ErrorMessage, Form } from 'formik';\nimport { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { needHelp } from '../../redux/auth/operations';\nimport { MainButton } from 'components/Button/Button';\nimport { Input, Textarea } from './NeedHelp.styled';\nimport { HelpSchema } from 'schemas/helpSchema';\n\nconst initialValues = {\n  email: '',\n  comment: '',\n};\n\nconst NeedHelpForm = ({ handleCloseModal }) => {\n  const dispatch = useDispatch();\n\n  const handleSubmit = async (values, { resetForm }) => {\n    const { email, comment } = values;\n    console.log({ email, comment });\n    try {\n      const result = await dispatch(needHelp({ email, comment }));\n      if (needHelp.fulfilled.match(result)) {\n        console.log('Request successful');\n        resetForm(initialValues);\n        handleCloseModal();\n      } else {\n      }\n    } catch (err) {\n      console.log('Error:', err.message);\n    }\n  };\n\n  return (\n    <div>\n      <Formik\n        initialValues={initialValues}\n        validationSchema={HelpSchema}\n        onSubmit={handleSubmit}\n      >\n        {({ errors, touched, submitCount }) => (\n          <Form autoComplete=\"off\">\n            <Input type=\"email\" name=\"email\" placeholder=\"Email address\" />\n            <ErrorMessage name=\"email\" />\n            <div>\n              <Textarea\n                component=\"textarea\"\n                name=\"comment\"\n                placeholder=\"Comment\"\n                style={{\n                  resize: 'none',\n                }}\n              />\n              <ErrorMessage name=\"comment\" />\n              {submitCount > 0 &&\n                errors.comment &&\n                (!touched.comment || touched.comment) && (\n                  <div>Please enter a comment</div>\n                )}\n            </div>\n            <MainButton type=\"submit\">Send</MainButton>\n          </Form>\n        )}\n      </Formik>\n    </div>\n  );\n};\n\nexport default NeedHelpForm;\n\nNeedHelpForm.propTypes = {\n  handleCloseModal: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport Modal from '../Modal/Modal';\nimport NeedHelpForm from './NeedHelpForm';\n\nconst NeedHelpModal = ({ closeModal }) => {\n  const handleCloseModal = () => {\n    closeModal();\n  };\n\n  return (\n    <div>\n      <Modal isOpen={true} handleClose={handleCloseModal} heading={'Need help'}>\n      <NeedHelpForm handleCloseModal={handleCloseModal} />\n      </Modal>\n    </div>\n  );\n};\n\nexport default NeedHelpModal;\n\nNeedHelpModal.propTypes = {\n  closeModal: PropTypes.func.isRequired,\n};","export const selectBoards = state => state.boards.boards;\n","import * as Yup from 'yup';\n\nexport const addBoardSchema = Yup.object().shape({\n  title: Yup.string().required('Title is required'),\n});\n","import styled from '@emotion/styled';\nimport { ErrorMessage, Field } from 'formik';\n\nexport const StyledInputField = styled(Field)`\n  width: 302px;\n  padding: 14px 18px;\n  margin-bottom: 24px;\n\n  border-radius: 8px;\n  border: 1px solid var(--input_color);\n  box-shadow: 0px 4px 16px 0px rgba(22, 22, 22, 0.08);\n  opacity: 0.4;\n  background-color: var(--modal_bgc);\n  font-family: 'Poppins', sans-serif;\n  font-weight: 400;\n  font-size: 14px;\n  outline: none;\n  text-transform: capitalize;\n\n  &:hover,\n  &:focus,\n  &:active {\n    outline: none;\n    opacity: 1;\n  }\n`;\n\nexport const ErrorMsg = styled(ErrorMessage)`\n  color: red;\n  font-size: 14px;\n  margin-bottom: 10px;\n`;\n\nexport const StyledSubtitle = styled.p`\n  margin-bottom: 14px;\n  color: var(--modal_main_color);\n  font-family: Poppins;\n  font-size: 14px;\n  font-style: normal;\n  font-weight: 500;\n  line-height: normal;\n  letter-spacing: -0.28px;\n`;\n\nexport const IconsWrapper = styled.div`\n  margin-bottom: 24px;\n  display: flex;\n  flex-direction: row;\n  gap: 8px;\n`;\n\nexport const StyledSVG = styled.svg`\n  width: 18px;\n  height: 18px;\n  fill: rgba(0, 0, 0, 0);\n  stroke: var(--modal_second_color);\n`;\n\nexport const StyledRadioField = styled(Field)`\n  display: none;\n  &:checked + img {\n    border: 1px solid var(--modal_bgc);\n    border-radius: 5px;\n    transform: scale(1.2);\n  }\n  &:checked + svg {\n    stroke: var(--modal_main_color);\n  }\n  &:hover + img {\n    border: 1px solid var(--modal_bgc);\n    border-radius: 5px;\n  }\n`;\n\nexport const BgImagesWrapper = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 4px;\n  width: 252px;\n  height: 60px;\n  margin-bottom: 40px;\n`;\n","import React from 'react';\nimport { Formik, Form } from 'formik';\nimport PropTypes from 'prop-types';\nimport { v4 as uuidv4 } from 'uuid';\nimport { nanoid } from '@reduxjs/toolkit';\nimport sprite from '../../images/sprite.svg';\nimport { addBoardSchema } from 'schemas';\nimport {\n  BgImagesWrapper,\n  ErrorMsg,\n  IconsWrapper,\n  StyledInputField,\n  StyledRadioField,\n  StyledSVG,\n  StyledSubtitle,\n} from './ModalBoard.styles';\nimport { MainButton } from 'components/Button/Button';\nimport { useDispatch } from 'react-redux';\nimport { createBoard, editBoard } from 'redux/boards/boardOperations';\n\nconst icons = [\n  'icon-project',\n  'icon-star',\n  'icon-loading',\n  'icon-puzzle-piece',\n  'icon-container',\n  'icon-lightning',\n  'icon-colors',\n  'icon-hexagon',\n];\n\nconst backgrounds = [\n  'bg1',\n  'bg2',\n  'bg3',\n  'bg4',\n  'bg5',\n  'bg6',\n  'bg7',\n  'bg8',\n  'bg9',\n  'bg10',\n  'bg11',\n  'bg12',\n  'bg13',\n  'bg14',\n  'bg15',\n  'bg16',\n];\n\nfunction ModalBoard({ btnContent, closeModal, boardData }) {\n  const dispatch = useDispatch();\n\n  const initialValues =\n    btnContent === 'Create'\n      ? {\n          title: '',\n          icon: icons[0],\n          background: backgrounds[0],\n        }\n      : {\n          title: boardData?.title,\n          icon: boardData?.icon,\n          background: boardData?.background,\n        };\n\n  const handleSubmit = (values, { resetForm }) => {\n    const boardId = `3${uuidv4().replace(/-/g, '')}`;\n\n    const newBoard = {\n      id: boardId,\n      title: values.title,\n      icon: values.icon,\n      background: values.background,\n      boardsData: { tasks: {}, columns: {}, columnOrder: [] },\n    };\n    if (btnContent === 'Create') {\n      dispatch(createBoard(newBoard));\n    } else {\n      console.log(newBoard);\n      dispatch(editBoard({ newBoard, id: boardData._id }));\n    }\n\n    resetForm();\n    closeModal();\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={addBoardSchema}\n      onSubmit={handleSubmit}\n    >\n      {({ handleChange, values }) => (\n        <Form autoComplete=\"off\">\n          <StyledInputField\n            type=\"text\"\n            name=\"title\"\n            placeholder=\"Title\"\n            onChange={handleChange}\n            value={values.title}\n          />\n          <ErrorMsg name=\"title\" component=\"p\" />\n          <StyledSubtitle>Icons</StyledSubtitle>\n          <IconsWrapper>\n            {icons.map(icon => (\n              <label key={nanoid()}>\n                <StyledRadioField\n                  type=\"radio\"\n                  name=\"icon\"\n                  value={icon}\n                  onChange={handleChange}\n                  checked={values.icon === icon}\n                />\n                <StyledSVG>\n                  <use href={`${sprite}#${icon}`}></use>\n                </StyledSVG>\n              </label>\n            ))}\n          </IconsWrapper>\n          <StyledSubtitle>Background</StyledSubtitle>\n          <BgImagesWrapper>\n            {backgrounds.map((background, i) => (\n              <label key={nanoid()}>\n                <StyledRadioField\n                  type=\"radio\"\n                  name=\"background\"\n                  value={background}\n                  onChange={handleChange}\n                  checked={values.background === background}\n                />\n                <img\n                  src={require(`../../images/backgrounds/${background}.jpg`)}\n                  alt={`background variant ${i + 1}`}\n                  width=\"28\"\n                />\n              </label>\n            ))}\n          </BgImagesWrapper>\n          <MainButton type=\"submit\">{btnContent}</MainButton>\n        </Form>\n      )}\n    </Formik>\n  );\n}\n\nModalBoard.propTypes = {\n  btnContent: PropTypes.string.isRequired,\n  closeModal: PropTypes.func.isRequired,\n};\n\nexport default ModalBoard;\n","import ModalBoard from './ModalBoard';\n\nexport default ModalBoard;\n","import {\n  SidebarBlock,\n  ButtonAdd,\n  SvgLightning,\n  Title,\n  TitleBlock,\n  BoardTitleBlock,\n  MyBoardTitle,\n  NeedHelpBlock,\n  NeedHelpButton,\n  SvgHelp,\n  HelpContent,\n  LogoutBtn,\n  Flower,\n  BoardList,\n  EditIcon,\n  BoardIcons,\n  TitleBoard,\n} from './Sidebar.styled';\nimport sprite from '../../images/sprite.svg';\nimport flower from '../../images/flower.png';\nimport { useState, useEffect } from 'react';\nimport { logOut } from 'redux/auth/operations';\nimport NeedHelpModal from 'components/NeedHelp/NeedHelpModal';\nimport { deleteBoard } from 'redux/boards/boardOperations';\nimport { selectBoards } from 'redux/boards/boardsSelectors';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getBoards } from 'redux/boards/boardOperations';\nimport Modal from 'components/Modal/Modal';\nimport ModalBoard from 'components/ModalBoard';\n\nconst actionsList = { add: 'add', edit: 'edit' };\n\nexport function Sidebar({ theme, isOpen }) {\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [modalType, setModalType] = useState(actionsList.add);\n  const [boardData, setBoardData] = useState(null);\n  const [isShow, setIsShow] = useState(false);\n  const boards = useSelector(selectBoards);\n  const dispatch = useDispatch();\n\n  useEffect(\n    () => {\n      dispatch(getBoards());\n    },\n    [dispatch],\n    boards\n  );\n\n  const toggleModal = () => {\n    setIsModalOpen(!isModalOpen);\n  };\n\n  const handleModalType = e => {\n    const buttonAction = e.currentTarget.ariaLabel;\n    const editButtonId = e.currentTarget.getAttribute('data-board-id') || '';\n    if (buttonAction === actionsList.add) {\n      setModalType(actionsList.add);\n      toggleModal();\n    } else {\n      setModalType(actionsList.edit);\n      setBoardData(boards.filter(board => board._id === editButtonId)[0]);\n      toggleModal();\n    }\n  };\n\n  const showModal = () => {\n    setIsShow(true);\n  };\n\n  const closeModal = () => {\n    setIsShow(false);\n  };\n\n  return (\n    <SidebarBlock className={`theme-${theme} ${isOpen ? 'open' : 'closed'}`}>\n      <TitleBlock>\n        <SvgLightning>\n          <use href={`${sprite}#icon-logo`} />\n        </SvgLightning>\n        <Title>Task Pro</Title>\n      </TitleBlock>\n      <MyBoardTitle>My boards</MyBoardTitle>\n      <BoardTitleBlock>\n        <p>Create a new board</p>\n        <ButtonAdd aria-label=\"add\" type=\"button\" onClick={handleModalType}>\n          <svg width={20} height={20}>\n            <use href={`${sprite}#icon-plus`} />\n          </svg>\n        </ButtonAdd>\n      </BoardTitleBlock>\n      <ul>\n        {boards.map(board => (\n          <BoardList key={board._id}>\n            <TitleBoard>\n              <svg width={18} height={18}>\n                <use href={`${sprite}#${board.icon}`} />\n              </svg>\n              {board.title}\n            </TitleBoard>\n            <BoardIcons>\n              <button\n                type=\"button\"\n                aria-label=\"edit\"\n                data-board-id={board._id}\n                onClick={handleModalType}\n              >\n                <EditIcon>\n                  <use href={`${sprite}#icon-pencil`} />\n                </EditIcon>\n              </button>\n              <EditIcon onClick={() => dispatch(deleteBoard(board._id))}>\n                <use href={`${sprite}#icon-trash`} />\n              </EditIcon>\n            </BoardIcons>\n          </BoardList>\n        ))}\n      </ul>\n      {isModalOpen && (\n        <Modal\n          isOpen={toggleModal}\n          handleClose={toggleModal}\n          heading={modalType === actionsList.add ? 'New board' : 'Edit board'}\n        >\n          <ModalBoard\n            btnContent={modalType === actionsList.add ? 'Create' : 'Edit'}\n            closeModal={toggleModal}\n            boardData={boardData}\n          />\n        </Modal>\n      )}\n      <NeedHelpBlock>\n        <Flower src={flower} alt=\"flower\" />\n        <HelpContent>\n          If you need help with <span>TaskPro</span>, check out our support\n          resources or reach out to our customer support team.\n        </HelpContent>\n        <NeedHelpButton type=\"button\" name=\"help\" onClick={showModal}>\n          <SvgHelp>\n            <use href={`${sprite}#icon-help`} />\n          </SvgHelp>\n          Need help?\n        </NeedHelpButton>\n        {isShow && <NeedHelpModal closeModal={closeModal} />}\n      </NeedHelpBlock>\n\n      <LogoutBtn type=\"button\" name=\"logout\" onClick={() => dispatch(logOut())}>\n        <svg width={32} height={32}>\n          <use xlinkHref={`${sprite}#icon-login`}></use>\n        </svg>\n        Log out\n      </LogoutBtn>\n    </SidebarBlock>\n  );\n}\n","import styled from '@emotion/styled';\n\nexport const ThemeContainer = styled.div`\nposition: relative;\n`;\n\nexport const ThemeList = styled.ul`\nposition: absolute;\n    top: 100%;\n    left: -10%;\n    transform: translate(-100%, 10%);\n    width: 100px;\n    height: 107px;\n    display: flex;\n  flex-direction: column;\n    padding: 18px 44px 18px 18px;\n    gap: 4px;\n  background: var(--theme_bgc);\n  box-shadow: 0px 4px 16px 0px var(--theme_shadow);\n  border-radius: 8px;\n  border: 1px solid #BEDBB0;\n  cursor: pointer;\n  z-index: 99;\n    z-index: 3;\n   }\n`;\n\nexport const ThemeItem = styled.li`\nfont-family: Poppins;\n  font-size: 14px;\n  font-style: normal;\n  font-weight: 400;\n  line-height: normal;\n  letter-spacing: -0.28px;\n  color: var(--theme_color);\n  background-color: var(--theme_bgc);\n    cursor: pointer;\n    &:hover {\n      // background-color: var(--theme_active);\n      color: var(--theme_text);\n   }\n`;\n\n\n\n\n\n\n// export const StyledSelect = styled(Select)`\n//   /* Стилі для вибраних тем */\n//   .css-1nmdiq5-menu {\n//     position: absolute;\n//     top: 100%;\n//     left: -10%;\n//     transform: translate(-100%, 10%);\n//     width: 100px;\n//     height: 107px;\n//     padding-left: 18px;\n//     border-radius: 8px;\n//   border: 1px solid #BEDBB0;\n//   background: #FCFCFC;\n//   box-shadow: 0px 4px 16px 0px rgba(17, 17, 17, 0.10); \n//     z-index: 1;\n//   }\n\n//   .css-1f769on{ \n\n//   }\n\n//   /* Стилі для опцій */\n \n//   .css-d7l1ni-option \n//   css-10wo9uf-option{\n//     font-family: Poppins;\n//   font-size: 14px;\n//   font-style: normal;\n//   font-weight: 400;\n//   line-height: normal;\n//   letter-spacing: -0.28px;\n//   color: var(--theme_color);\n//   background-color: var(--theme_bgc);\n//     cursor: pointer;\n//     &:hover {\n//       // background-color: var(--theme_active);\n//       color: var(--theme_text);\n//     }\n//   }\n// `;\n\n// export const SelectStyles = {\n//   control: provided => ({\n//     ...provided,\n//     display: 'none',\n//     // Додайте стилі для контролу (значення) Select\n//   }),\n//   option: provided => ({\n//     ...provided,\n//      // Приховати опції\n//   }),\n// };\n\n\n\n// export const Select = styled.select`\n//   // position: absolute;\n//   bottom: -70px;\n//   left: 50%;\n//   transform: translateX(-50%);\n//   padding: 18px 44px 18px 18px;\n//   display: flex;\n//   flex-direction: column;\n//   justify-content: center;\n//   gap: 4px;\n//   background: var(--theme_bgc);\n//   box-shadow: 0px 4px 16px 0px var(--theme_shadow);\n//   border-radius: 8px;\n//   border: 1px solid var(--border_theme);\n//   cursor: pointer;\n//   z-index: 99;\n//   appearance: none; /* Remove default arrow */\n// `;\n\n// export const Option = styled.option`\n//   font-family: Poppins;\n//   font-size: 14px;\n//   font-style: normal;\n//   font-weight: 400;\n//   line-height: normal;\n//   letter-spacing: -0.28px;\n//   color: var(--theme_color);\n//   background-color: var(--theme_bgc); /* Set background color */\n\n//   &:hover,\n//   &:focus,\n//   &:active {\n//     background-color: var(--theme_active);\n//     color: var(--theme_text); /* Change text color on interaction */\n//   }\n// `;\n\n\n  // .css-1wa3eu0-singleValue {\n  //   // color: var(--close_active);\n  //      overflow: hidden;\n  // }\n\n   /* Відобразити опції */\n  //  .css-1s2ci2r-menu {\n     \n  // }\n\n  // export const SelectContainer = styled.div`\n//   position: absolute;\n//   top: 100%;\n//   left: -10%;\n//   transform: translate(-100%, 10%);\n//   width: 100px;\n//   height: 107px;\n//   // padding-left: 18px;\n//   border-radius: 8px;\n// border: 1px solid #BEDBB0;\n// background: #FCFCFC;\n// box-shadow: 0px 4px 16px 0px rgba(17, 17, 17, 0.10); \n// `;","import React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectUser } from 'redux/auth/selectors';\nimport { updateUser } from 'redux/auth/operations';\nimport { ThemeContainer, ThemeList, ThemeItem } from './ThemeSelector.styled';\n\nconst ThemeSelector = ({ onClose }) => {\n  const { theme } = useSelector(selectUser);\n  const dispatch = useDispatch();\n  const [currentTheme, setCurrentTheme] = useState(theme);\n\n  useEffect(() => {\n    document.body.classList.remove('light', 'dark', 'violet');\n    document.body.classList.add(currentTheme);\n  }, [currentTheme]);\n\n  const themeOptions = [\n    { value: 'light', label: 'Light' },\n    { value: 'dark', label: 'Dark' },\n    { value: 'violet', label: 'Violet' },\n  ];\n\n  const onHandleTheme = async newTheme => {\n    setCurrentTheme(newTheme);\n\n    try {\n      await dispatch(updateUser({ theme: newTheme.toUpperCase() }));\n\n      // Зберігаємо нову тему в localStorage\n      localStorage.setItem('theme', newTheme);\n\n      onClose();\n    } catch (error) {\n      console.error('Failed to update theme:', error);\n    }\n  };\n\n  return (\n    <ThemeContainer>\n      <ThemeList>\n        {themeOptions.map(option => (\n          <ThemeItem\n            key={option.value}\n            onClick={() => onHandleTheme(option.value)}\n            className={currentTheme === option.value ? 'active' : ''}\n          >\n            {option.label}\n          </ThemeItem>\n        ))}\n      </ThemeList>\n    </ThemeContainer>\n  );\n};\n\nexport default ThemeSelector;\n\n\n\n\n\n// import React, { useState, useEffect } from 'react';\n// import { useSelector, useDispatch } from 'react-redux';\n// import { selectUser } from 'redux/auth/selectors';\n// import { updateUser } from 'redux/auth/operations';\n// import { ThemeContainer, ThemeList, ThemeItem } from './ThemeSelector.styled';\n\n// const ThemeSelector = ({ onClose }) => {\n//   const { theme } = useSelector(selectUser);\n//   const dispatch = useDispatch();\n//   const [currentTheme, setCurrentTheme] = useState(theme);\n\n//   useEffect(() => {\n//     document.body.classList.remove('light', 'dark', 'violet');\n//     document.body.classList.add(currentTheme);\n//   }, [currentTheme]);\n\n//   const themeOptions = [\n//     { value: 'light', label: 'Light' },\n//     { value: 'dark', label: 'Dark' },\n//     { value: 'violet', label: 'Violet' },\n//   ];\n\n//   useEffect(() => {\n//     document.body.classList.remove('light', 'dark', 'violet');\n//     document.body.classList.add(currentTheme);\n//   }, [currentTheme]);\n\n//   const onHandleTheme = async newTheme => {\n//     console.log(newTheme);\n//     setCurrentTheme(newTheme);\n\n//     try {\n//       await dispatch(updateUser({ theme: newTheme.toUpperCase() }));\n//       onClose();\n//     } catch (error) {\n//       console.error('Failed to update theme:', error);\n//     }\n//   };\n\n//   return (\n//     <ThemeContainer>\n//       <ThemeList>\n//         {themeOptions.map(option => (\n//           <ThemeItem\n//             key={option.value}\n//             onClick={() => onHandleTheme(option.value)}\n//             className={currentTheme === option.value ? 'active' : ''}\n//           >\n//             {option.label}\n//           </ThemeItem>\n//         ))}\n//       </ThemeList>\n//     </ThemeContainer>\n//   );\n// };\n\n// export default ThemeSelector;\n\n\n\n\n\n\n// import React, { useState, useEffect } from 'react';\n// import { useSelector, useDispatch } from 'react-redux';\n// import { selectUser } from 'redux/auth/selectors';\n// import { updateUser } from 'redux/auth/operations';\n// import {  Container, StyledSelect, SelectStyles } from './ThemeSelector.styled';\n\n// const ThemeSelector = ({ isOpen, onClose }) => {\n//   const { theme } = useSelector(selectUser);\n//   const dispatch = useDispatch();\n//   const [currentTheme, setCurrentTheme] = useState(theme);\n\n//   useEffect(() => {\n//     document.body.classList.remove('light', 'dark', 'violet');\n//     document.body.classList.add(currentTheme);\n//   }, [currentTheme]);\n\n//   const themeOptions = [\n//     { value: 'light', label: 'Light' },\n//     { value: 'dark', label: 'Dark' },\n//     { value: 'violet', label: 'Violet' },\n//   ];\n\n//   const onHandleTheme = async selectedOption => {\n//     console.log(selectedOption);\n//     const newTheme = selectedOption.value;\n\n//     setCurrentTheme(newTheme);\n\n//     try {\n//       await dispatch(updateUser({ theme: newTheme }));\n//       onClose();\n//     } catch (error) {\n//       console.error('Failed to update theme:', error);\n//     }\n//   };\n\n//   return (\n//     <Container>\n//       <StyledSelect\n//         value={themeOptions.find(option => option.value === currentTheme)}\n//         onChange={onHandleTheme}\n//         options={themeOptions}\n//         isSearchable={false}\n//         styles={SelectStyles}\n//         menuIsOpen={isOpen}\n//       />\n//     </Container>\n//   );\n// };\n\n// export default ThemeSelector;\n","import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  width: auto;\n  max-width: 100%;\n  // color: #ffffff;\n  height: 68px;\n  padding: 14px 20px;\n  background-color: var(--header_bgc);\n  color: var(--header_theme_text);\n\n\n  @media (max-width: 1440px) {\n    padding: 18px 32px;\n  }\n  @media (max-width: 768px) {\n    padding: 18px 24px;\n  }\n`;\n\nexport const MenuIcon = styled.svg`\n  width: 24px;\n  height: 24px;\n  stroke: var(--header_user_text);\n\n  @media screen and (min-width: 375px) {\n    width: 32px;\n    height: 32px;\n  }\n\n  @media (min-width: 1440px) {\n    display: none;\n  }\n`;\n\nexport const HeaderWrap = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 14px;\n`;\n\nexport const HeaderNav = styled.div`\n// position: relative;\ndisplay: inline-flex;\njustify-content: center;\nalign-items: center;\ngap: 4px;\nmargin-right: 14px;\nwidth: 80px;\ncursor: pointer;\n`;\n\nexport const SelectIcon = styled.svg`\n  width: 16px;\n  height: 16px;\n  margin-left: 4px;\n  stroke: var(--chevron-down);\n  z-index: 999;\n`;\n\nexport const Text = styled.div`\ncolor: var(--header_theme_text);\nfont-family: Poppins;\nfont-size: 14px;\nfont-style: normal;\nfont-weight: 500;\nline-height: normal;\nletter-spacing: -0.28px;\n`;","import React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport UserInfo from 'components/UserInfo/UserInfo';\nimport { selectUser } from 'redux/auth/selectors';\nimport { Sidebar } from 'components/Sidebar/Sidebar';\nimport ThemeSelector from 'components/ThemeSelector/ThemeSelector';\nimport {\n  Container,\n  HeaderNav,\n  MenuIcon,\n  HeaderWrap,\n  SelectIcon,\n  Text,\n} from './Header.styled';\nimport Sprite from '../../images/sprite.svg';\nimport { updateUser } from 'redux/auth/operations';\n\nconst Header = () => {\n  const dispatch = useDispatch();\n  const { theme } = useSelector(selectUser);\n  const [isSideBarOpen, setSideBarOpen] = useState(false);\n  const [isThemeSelectorOpen, setThemeSelectorOpen] = useState(false);\n\n  useEffect(() => {\n    const storedTheme = localStorage.getItem('theme');\n    if (storedTheme) {\n      dispatch(updateUser({ theme: storedTheme }));\n    }\n    let timeout;\n\n    if (isSideBarOpen) {\n      timeout = setTimeout(() => {\n        document.addEventListener('click', handleOutsideClick);\n      }, 100);\n    } else {\n      document.removeEventListener('click', handleOutsideClick);\n    }\n\n    return () => {\n      clearTimeout(timeout);\n      document.removeEventListener('click', handleOutsideClick);\n    };\n  }, [dispatch, isSideBarOpen]);\n\n  const handleOutsideClick = e => {\n    if (!e.target.closest('aside')) {\n      setSideBarOpen(false);\n    }\n  };\n\n  const toggleSideBar = () => {\n    setSideBarOpen(!isSideBarOpen);\n  };\n\n  const toggleThemeSelector = () => {\n    setThemeSelectorOpen(!isThemeSelectorOpen);\n  };\n\n  return (\n    <Container className={`theme-${theme}`}>\n      <div onClick={toggleSideBar}>\n        <MenuIcon className={`icon-menu theme-${theme}`} width=\"32\" height=\"32\">\n          <use href={`${Sprite}#icon-menu`} />\n        </MenuIcon>\n      </div>\n      {isSideBarOpen && <Sidebar />}\n      <HeaderWrap>\n        <HeaderNav>\n          <div>\n            <SelectIcon width=\"16\" height=\"16\" onClick={toggleThemeSelector}>\n              <use href={`${Sprite}#icon-chevron-down`} />\n            </SelectIcon>\n          </div>\n          <Text>Theme</Text>\n        </HeaderNav>\n        {isThemeSelectorOpen && (\n          <ThemeSelector\n            onClose={() => setThemeSelectorOpen(false)}\n          />\n        )}\n        <UserInfo />\n      </HeaderWrap>\n      {isSideBarOpen && <Sidebar theme={theme} isOpen={isSideBarOpen} />}\n    </Container>\n  );\n};\n\nexport default Header;\n\n\n\n\n\n// import React, { useState, useEffect, useCallback } from 'react';\n// import { useDispatch, useSelector } from 'react-redux';\n// import UserInfo from 'components/UserInfo/UserInfo';\n// import { selectUser } from 'redux/auth/selectors';\n// import { updateUser } from 'redux/auth/operations';\n// import { Sidebar } from 'components/Sidebar/Sidebar';\n// import ThemeSelector from 'components/ThemeSelector/ThemeSelector';\n// import {\n//   Container,\n//   HeaderNav,\n//   MenuIcon,\n//   HeaderWrap,\n//   SelectIcon,\n//   Text,\n// } from './Header.styled';\n// import Sprite from '../../images/sprite.svg';\n\n// const Header = () => {\n//   const dispatch = useDispatch();\n//   const user = useSelector(selectUser); // Отримати інформацію про користувача зі стору\n//   const [isSideBarOpen, setSideBarOpen] = useState(false);\n//   const [isThemeSelectorOpen, setThemeSelectorOpen] = useState(false);\n\n//   const toggleTheme = useCallback(newTheme => {\n//     dispatch(updateUser(newTheme)); // Використовуйте вашу дію для оновлення теми у Redux-сховищі\n//   }, [dispatch]);\n\n//   useEffect(() => {\n//     const storedTheme = localStorage.getItem('theme');\n//     if (storedTheme) {\n//       toggleTheme(storedTheme); // Встановити тему з локального сховища\n//     }\n//     let timeout;\n\n//     if (isSideBarOpen) {\n//       timeout = setTimeout(() => {\n//         document.addEventListener('click', handleOutsideClick);\n//       }, 100);\n//     } else {\n//       document.removeEventListener('click', handleOutsideClick);\n//     }\n\n//     return () => {\n//       clearTimeout(timeout);\n//       document.removeEventListener('click', handleOutsideClick);\n//     };\n//   }, [dispatch, isSideBarOpen, toggleTheme]); \n\n//   const handleOutsideClick = e => {\n//     if (!e.target.closest('aside')) {\n//       setSideBarOpen(false);\n//     }\n//   };\n\n//   const toggleSideBar = () => {\n//     setSideBarOpen(!isSideBarOpen);\n//   };\n\n//   const toggleThemeSelector = () => {\n//     setThemeSelectorOpen(!isThemeSelectorOpen);\n//   };\n\n//   return (\n//     <Container className={`theme-${user.theme}`}> {/* Використовуйте тему користувача з Redux-сховища */}\n//       <div onClick={toggleSideBar}>\n//         <MenuIcon className={`icon-menu theme-${user.theme}`} width=\"32\" height=\"32\">\n//           <use href={`${Sprite}#icon-menu`} />\n//         </MenuIcon>\n//       </div>\n//       {isSideBarOpen && <Sidebar />}\n//       <HeaderWrap>\n//         <HeaderNav>\n//           <div>\n//             <SelectIcon width=\"16\" height=\"16\" onClick={toggleThemeSelector}>\n//               <use href={`${Sprite}#icon-chevron-down`} />\n//             </SelectIcon>\n//           </div>\n//           <Text>Theme</Text>\n//         </HeaderNav>\n//         {isThemeSelectorOpen && (\n//           <ThemeSelector\n//             isOpen={isThemeSelectorOpen} \n//             onClose={() => setThemeSelectorOpen(false)}\n//             onToggleThemeSelector={toggleThemeSelector} \n//           />\n//         )}\n//         <UserInfo />\n//       </HeaderWrap>\n//       {isSideBarOpen && <Sidebar theme={user.theme} isOpen={isSideBarOpen} />}\n//     </Container>\n//   );\n// };\n\n// export default Header;\n\n\n","import styled from '@emotion/styled';\n\nexport const HeadContainer = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 10px 24px;\n`;\n\nexport const HeadText = styled.p`\n  color: var(--board_main_color);\n  font-family: 'Poppins';\n  font-weight: 500;\n  font-size: 18px;\n  line-height: normal;\n  letter-spacing: -0.36px;\n`;\n","import { HeadContainer, HeadText } from './HeaderDashboard.styled';\n\nexport const HeaderDashboard = () => {\n  return (\n    <HeadContainer>\n      <HeadText>Name Board</HeadText>\n      <HeadText>Filters</HeadText>\n    </HeadContainer>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const LineContainer = styled.div`\n  position: absolute;\n  width: 4px;\n  top: 0;\n  left: -4px;\n  height: 100%;\n  border-radius: 4px 0px 0px 4px;\n  background: #8fa1d0;\n`;\n\nexport const TaskContainer = styled.li`\n  position: relative;\n  padding: 14px 20px;\n  border-top-right-radius: 8px;\n  border-bottom-right-radius: 8px;\n  background-color: ${props =>\n    props.isDragging ? 'var(--board_task_bgc)' : 'var(--board_task_bgc)'};\n  margin-bottom: 8px;\n`;\n\nexport const TaskTitle = styled.h2`\n  margin-bottom: 8px;\n\n  color: var(--board_main_color);\n  font-family: 'Poppins';\n  font-weight: 600;\n  font-size: 14px;\n  line-height: normal;\n  letter-spacing: -0.28px;\n`;\n\nexport const TaskDesc = styled.p`\n  margin-bottom: 14px;\n  width: 290px;\n  height: 38px;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n\n  color: var(--board_filter_color);\n  font-family: 'Poppins';\n  font-weight: 400;\n  font-size: 12px;\n  line-height: calc(16 / 12);\n  letter-spacing: -0.24px;\n`;\n\nexport const TaskVector = styled.div`\n  width: 290px;\n  height: 1px;\n  background-color: var(--line_color);\n  margin-bottom: 14px;\n`;\n\nexport const TaskBox = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: flex-end;\n`;\n\nexport const TaskContent = styled.div`\n  display: flex;\n  gap: 14px;\n`;\n\nexport const TaskPrior = styled.div`\n  > p {\n    margin-bottom: 5.5px;\n\n    color: var(--board_second_color);\n    font-family: 'Poppins';\n    font-size: 8px;\n    line-height: normal;\n    letter-spacing: -0.16px;\n  }\n  > div {\n    width: 12px;\n    height: 12px;\n    border-radius: 50%;\n    background-color: violet;\n  }\n`;\n\nexport const TaskDeadline = styled.div`\n  > p {\n    margin-bottom: 5.5px;\n\n    color: var(--board_second_color);\n    font-family: 'Poppins';\n    font-size: 8px;\n    line-height: normal;\n    letter-spacing: -0.16px;\n  }\n  > span {\n    color: var(--board_main_color);\n    font-family: Poppins;\n    font-size: 10px;\n    font-style: normal;\n    font-weight: 400;\n    line-height: normal;\n    letter-spacing: -0.2px;\n  }\n`;\n\nexport const TestListIcon = styled.ul`\n  display: flex;\n  gap: 8px;\n  align-items: center;\n  > li {\n    display: flex;\n    align-items: center;\n    > button {\n      padding: 0;\n      border: none;\n      background-color: rgba(0, 0, 0, 0);\n      > svg {\n        stroke: var(--modal_second_color);\n        fill: rgba(0, 0, 0, 0);\n        &:hover,\n        &:focus,\n        &:active {\n          stroke: var(--icon_active_color);\n        }\n      }\n    }\n  }\n`;\n","import {\n  LineContainer,\n  TaskContainer,\n  TaskTitle,\n  TaskDesc,\n  TaskVector,\n  TaskBox,\n  TaskContent,\n  TaskPrior,\n  TaskDeadline,\n  TestListIcon,\n} from './Task.styled';\nimport { Draggable } from 'react-beautiful-dnd';\nimport sprite from '../../images/sprite.svg';\n\nexport const Task = ({ task, index }) => {\n  return (\n    <Draggable draggableId={task.id} index={index}>\n      {(provided, snapshot) => (\n        <TaskContainer\n          {...provided.draggableProps}\n          {...provided.dragHandleProps}\n          ref={provided.innerRef}\n          isDragging={snapshot.isDragging}\n        >\n          <LineContainer />\n          {/* <button onClick={() => console.log('awdawd')}></button> */}\n          <TaskTitle>{task.title}</TaskTitle>\n          <TaskDesc>{task.description}</TaskDesc>\n          <TaskVector />\n          <TaskBox>\n            <TaskContent>\n              <TaskPrior>\n                {/* <p>{task.priority}</p> */}\n                <p>Priority</p>\n                <div />\n              </TaskPrior>\n              <TaskDeadline>\n                <p>Deadline</p>\n                <span>{task.deadline}</span>\n              </TaskDeadline>\n            </TaskContent>\n            <TestListIcon>\n              <li>\n                <button>\n                  <svg width={16} height={16}>\n                    <use xlinkHref={`${sprite}#icon-bell`} />\n                  </svg>\n                </button>\n              </li>\n              <li>\n                <button>\n                  <svg width={16} height={16}>\n                    <use xlinkHref={`${sprite}#icon-pencil`} />\n                  </svg>\n                </button>\n              </li>\n              <li>\n                <button>\n                  <svg width={16} height={16}>\n                    <use xlinkHref={`${sprite}#icon-trash`} />\n                  </svg>\n                </button>\n              </li>\n            </TestListIcon>\n          </TaskBox>\n        </TaskContainer>\n      )}\n    </Draggable>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const Button = styled.button`\n  width: 335px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border-radius: 8px;\n  border: none;\n  padding: 14px 78px;\n  cursor: pointer;\n\n  color: var(--text_btn);\n  background: var(--normal_btn);\n  font-family: 'Poppins';\n  font-weight: 500;\n  font-size: 14px;\n  line-height: normal;\n  letter-spacing: -0.28px;\n  transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:hover,\n  &:focus {\n    background: var(--active_btn);\n    transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  }\n`;\n\nexport const BoxAddSvg = styled.span`\n  display: inline-block;\n  width: 28px;\n  height: 28px;\n  padding: 7px;\n  border-radius: 6px;\n  background-color: var(--plus_bgc);\n  margin-right: 7px;\n`;\n\nexport const SvgAdd = styled.svg`\n  width: 14px;\n  height: 14px;\n  stroke: var(--plus_color);\n`;\n","import sprite from '../../../images/sprite.svg';\nimport { Button, BoxAddSvg, SvgAdd } from './BtnColumn.styled';\n\nconst BtnColumn = ({ text, onClick }) => {\n  return (\n    <Button onClick={onClick}>\n      <BoxAddSvg>\n        <SvgAdd>\n          <use href={`${sprite}#icon-plus`} />\n        </SvgAdd>\n      </BoxAddSvg>\n      {text}\n    </Button>\n  );\n};\n\nexport default BtnColumn;\n","import styled from '@emotion/styled';\nimport { Field, Form } from 'formik';\n\nexport const FormContainer = styled(Form)`\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  align-items: center;\n`;\n\nexport const Input = styled(Field)`\n  width: 100%;\n  padding: 14px 18px;\n  margin-bottom: 24px;\n  border-radius: 8px;\n  border: 1px solid var(--input_color);\n  opacity: 0.4;\n  box-shadow: 0px 4px 16px 0px rgba(22, 22, 22, 0.08);\n\n  color: var(--modal_main_color);\n  background-color: var(--modal_bgc);\n  font-size: 18px;\n  font-family: Poppins;\n  font-weight: 500;\n  &:hover,\n  &:focus,\n  &:active {\n    background-color: var(--modal_bgc);\n    opacity: 1;\n    box-shadow: 0px 4px 16px 0px rgba(22, 22, 22, 0.08);\n  }\n`;\n","import { useState } from 'react';\nimport { Formik } from 'formik';\n\nimport BtnColumn from '../BtnColumn/BtnColumn';\nimport { FormContainer, Input } from './ModalColumn.styled';\n\nconst ModalColumn = ({ handleSubmit, nameTitle }) => {\n  const [visible, setVisible] = useState(false);\n  const [title, setTitle] = useState(nameTitle || '');\n\n  const handlerVisible = () => {\n    setVisible(!visible);\n  };\n\n  const handleFormSubmit = () => {\n    handleSubmit(title);\n    handlerVisible();\n  };\n\n  return (\n    <Formik initialValues={{ title: nameTitle }} onSubmit={handleFormSubmit}>\n      <FormContainer>\n        <Input\n          name=\"title\"\n          type=\"text\"\n          placeholder=\"Title\"\n          value={title}\n          onChange={e => {\n            setTitle(e.target.value);\n          }}\n        />\n        <BtnColumn type=\"submit\" text={'Add'} />\n      </FormContainer>\n    </Formik>\n  );\n};\nexport default ModalColumn;\n","import Modal from '../../Modal/Modal';\nimport ModalColumn from '../ModalColumn/ModalColumn';\n\nconst AddColumn = ({ closeColumnModal, handleSubmit, title, nameTitle }) => {\n  const handleCloseModal = () => {\n    closeColumnModal();\n  };\n\n  return (\n    <div>\n      <Modal isOpen={true} handleClose={handleCloseModal} heading={title}>\n        <ModalColumn handleSubmit={handleSubmit} nameTitle={nameTitle} />\n      </Modal>\n    </div>\n  );\n};\n\nexport default AddColumn;\n","import styled from '@emotion/styled';\n\nexport const Container = styled.li`\n  border-radius: 2px;\n  max-width: 334px;\n\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n`;\nexport const TitleBox = styled.div`\n  min-height: 56px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 18px 20px;\n  border-radius: 8px;\n\n  background-color: var(--board_task_bgc);\n`;\n\nexport const Title = styled.h3`\n  color: var(--board_main_color);\n  font-size: 14px;\n  font-style: normal;\n  font-weight: 500;\n  line-height: normal;\n  letter-spacing: -0.28px;\n`;\n\nexport const BoxSvg = styled.div`\n  display: flex;\n  gap: 8px;\n  > button {\n    background-color: transparent;\n    border: none;\n  }\n`;\n\nexport const Svg = styled.svg`\n  width: 16px;\n  height: 16px;\n  stroke: var(--board_second_color);\n  fill: transparent;\n  &:hover {\n    stroke: var(--active_btn);\n  }\n`;\n\nexport const TaskList = styled.ul`\n  padding: 8px;\n  max-height: 478px;\n  transition: background-color 0.2s ease;\n  background-color: ${props => (props.isDraggingOver ? 'inherit' : 'inherit')};\n\n  flex-grow: 1;\n  min-height: 100px;\n`;\n\nexport const ContainerModal = styled.div`\n  width: 200px;\n  height: 300px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  background-color: #beb7b7;\n  position: absolute;\n  left: 800px;\n  top: 200px;\n`;\n","import { useState } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { Droppable, Draggable } from 'react-beautiful-dnd';\nimport { Task } from 'components/Task/Task';\nimport AddColumn from './AddColumn/AddColumn';\nimport BtnColumn from './BtnColumn/BtnColumn';\nimport {\n  Container,\n  Title,\n  TitleBox,\n  TaskList,\n  ContainerModal,\n  Svg,\n  BoxSvg,\n} from './Column.styled';\nimport sprite from '../../images/sprite.svg';\n\nexport const Column = ({ column, tasks, index, cardData, setCardData }) => {\n  const [visible, setVisible] = useState(false);\n  const [dataForModal, setDataForModal] = useState(column);\n  const [titleTask, setTitleTask] = useState('');\n  const [showEditModal, setShowEditModal] = useState(false);\n\n  if (true === false) {\n    console.log(setDataForModal);\n  }\n\n  const handleVisible = () => {\n    setVisible(!visible);\n  };\n\n  const handleVisibleEdit = () => {\n    setShowEditModal(!showEditModal);\n  };\n\n  const handleSubmit = () => {\n    const taskId = `1${uuidv4().replace(/-/g, '')}`;\n\n    const newTask = {\n      [taskId]: {\n        id: taskId,\n        title: titleTask,\n        description: 'awdawd',\n        priority: 'over',\n        deadline: '22.33.44',\n      },\n    };\n\n    const columnId = dataForModal.id;\n\n    const newColumn = {\n      ...cardData.columns[columnId],\n      taskIds: [...cardData.columns[columnId].taskIds, taskId],\n    };\n\n    setCardData(prevCardData => ({\n      ...prevCardData,\n      tasks: {\n        ...prevCardData.tasks,\n        ...newTask,\n      },\n      columns: {\n        ...prevCardData.columns,\n        [columnId]: newColumn,\n      },\n    }));\n\n    handleVisible();\n  };\n\n  const handleEdit = e => {\n    handleVisibleEdit();\n  };\n\n  const handleSubmitEdit = data => {\n    column.title = data;\n    handleVisibleEdit();\n  };\n\n  const handleDelete = () => {\n    if (tasks.length === 0) {\n      const newColumns = { ...cardData.columns };\n      delete newColumns[column.id];\n\n      setCardData(prevCardData => ({\n        ...prevCardData,\n        columns: newColumns,\n      }));\n    }\n  };\n\n  return (\n    <Draggable draggableId={column.id} index={index}>\n      {provided => (\n        <Container {...provided.draggableProps} ref={provided.innerRef}>\n          <TitleBox {...provided.dragHandleProps}>\n            <Title>{column.title}</Title>\n            <BoxSvg>\n              <button onClick={handleEdit}>\n                <Svg>\n                  <use href={`${sprite}#icon-pencil`} />\n                </Svg>\n              </button>\n              <button onClick={handleDelete}>\n                <Svg>\n                  <use href={`${sprite}#icon-trash`} />\n                </Svg>\n              </button>\n            </BoxSvg>\n          </TitleBox>\n          <Droppable droppableId={column.id} type=\"task\">\n            {(provided, snapshot) => (\n              <TaskList\n                ref={provided.innerRef}\n                {...provided.droppableProps}\n                isDraggingOver={snapshot.isDraggingOver}\n              >\n                {tasks.map((task, index) => (\n                  <Task key={task.id} task={task} index={index} />\n                ))}\n                {provided.placeholder}\n              </TaskList>\n            )}\n          </Droppable>\n          <BtnColumn text={'Add another card'} onClick={handleVisible} />\n          {showEditModal && (\n            <AddColumn\n              title={'Edit column'}\n              nameTitle={column.title}\n              closeColumnModal={handleVisibleEdit}\n              handleSubmit={handleSubmitEdit}\n            />\n          )}\n          {visible && (\n            <ContainerModal>\n              Add Task\n              <label>\n                Task title\n                <input\n                  type=\"text\"\n                  value={titleTask}\n                  onChange={e => {\n                    setTitleTask(e.target.value);\n                  }}\n                />\n              </label>\n              <button type=\"submit\" onClick={handleSubmit}>\n                Add Task\n              </button>\n            </ContainerModal>\n          )}\n        </Container>\n      )}\n    </Draggable>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const MainContainer = styled.div`\n  display: flex;\n  padding: 0 24px 36px 24px;\n  gap: 34px;\n  overflow-x: auto;\n`;\n\nexport const Container = styled.ul`\n  display: flex;\n  gap: 34px;\n  position: relative;\n`;\n\nexport const Button = styled.button`\n  display: flex;\n  align-items: center;\n  border-radius: 8px;\n  border: none;\n  padding: 14px 78px;\n  cursor: pointer;\n\n  color: var(--add_text_color);\n  background: var(--add_btn_bgc);\n  font-family: 'Poppins';\n  font-weight: 500;\n  font-size: 14px;\n  line-height: normal;\n  letter-spacing: -0.28px;\n  transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:hover,\n  &:focus {\n    background: var(--create_active);\n    transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  }\n`;\nexport const BoxSvg = styled.span`\n  display: inline-block;\n  width: 28px;\n  height: 28px;\n  padding: 7px;\n  border-radius: 6px;\n  background-color: var(--add_plus_bgc);\n  margin-right: 7px;\n`;\nexport const SvgAdd = styled.svg`\n  width: 14px;\n  height: 14px;\n  stroke: var(--add_plus_color);\n`;\n","import { useState } from 'react';\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\nimport { v4 as uuidv4 } from 'uuid';\nimport { Column } from 'components/Column/Column';\n//add Elvira\nimport AddColumn from 'components/Column/AddColumn/AddColumn';\nimport {\n  MainContainer,\n  Container,\n  Button,\n  BoxSvg,\n  SvgAdd,\n} from './MainDashboard.styled';\nimport sprite from '../../images/sprite.svg';\n\nexport const MainDashboard = ({ cardData, setCardData }) => {\n  // кто будет делать этот блок, обратите внимание что именно приходит в cardData\n  const [visible, setVisible] = useState(false);\n\n  const handlerVisible = () => {\n    setVisible(!visible);\n  };\n\n  const handleSubmit = data => {\n    const columnId = `2${uuidv4().replace(/-/g, '')}`;\n\n    const newColumn = {\n      [columnId]: {\n        id: columnId,\n        title: data,\n        taskIds: [],\n      },\n    };\n\n    setCardData({\n      ...cardData,\n      columns: {\n        ...cardData.columns,\n        ...newColumn,\n      },\n      columnOrder: [...cardData.columnOrder, ...[columnId]],\n    });\n\n    handlerVisible();\n  };\n  // Эти три функции ниже отвечают за главный функционал переставления карточек между колонками и в колонках\n  // а так же за анимацию при их передвижение\n  const onDragStart = () => {\n    document.body.style.color = 'inherit';\n    document.body.style.transition = 'background-color 0.2s ease';\n  };\n\n  const onDragUpdate = update => {\n    const { destination } = update;\n    const opacity = destination\n      ? destination.index / Object.keys(cardData.tasks).length\n      : 0;\n\n    document.body.style.backgroundColor = `rgba(153, 141, 217, ${opacity})`;\n  };\n\n  const onDragEnd = result => {\n    document.body.style.color = 'inherit';\n    document.body.style.backgroundColor = 'inherit';\n\n    const { destination, source, draggableId, type } = result;\n\n    if (!destination) {\n      return;\n    }\n\n    if (\n      destination.droppableId === source.droppableId &&\n      destination.index === source.index\n    ) {\n      return;\n    }\n\n    if (type === 'column') {\n      const newColumnOrder = Array.from(cardData.columnOrder);\n      newColumnOrder.splice(source.index, 1);\n      newColumnOrder.splice(destination.index, 0, draggableId);\n\n      const newState = {\n        ...cardData,\n        columnOrder: newColumnOrder,\n      };\n\n      setCardData(newState);\n\n      return;\n    }\n\n    const start = cardData.columns[source.droppableId];\n    const finish = cardData.columns[destination.droppableId];\n\n    if (start === finish) {\n      const newTaskId = Array.from(start.taskIds);\n      newTaskId.splice(source.index, 1);\n      newTaskId.splice(destination.index, 0, draggableId);\n\n      const newColumn = {\n        ...start,\n        taskIds: newTaskId,\n      };\n\n      const newState = {\n        ...cardData,\n        columns: {\n          ...cardData.columns,\n          [newColumn.id]: newColumn,\n        },\n      };\n\n      setCardData(newState);\n      return;\n    }\n\n    const startTaskIds = Array.from(start.taskIds);\n    startTaskIds.splice(source.index, 1);\n    const newStart = {\n      ...start,\n      taskIds: startTaskIds,\n    };\n\n    const finishTaskIds = Array.from(finish.taskIds);\n    finishTaskIds.splice(destination.index, 0, draggableId);\n\n    const newFinish = {\n      ...finish,\n      taskIds: finishTaskIds,\n    };\n\n    const newState = {\n      ...cardData,\n      columns: {\n        ...cardData.columns,\n        [newStart.id]: newStart,\n        [newFinish.id]: newFinish,\n      },\n    };\n\n    setCardData(newState);\n  };\n\n  return (\n    <MainContainer>\n      <DragDropContext\n        onDragStart={onDragStart}\n        onDragUpdate={onDragUpdate}\n        onDragEnd={onDragEnd}\n      >\n        <Droppable\n          droppableId=\"all-columns\"\n          direction=\"horizontal\"\n          type=\"column\"\n        >\n          {provided => (\n            <Container {...provided.droppableProps} ref={provided.innerRef}>\n              {cardData.columnOrder.map((columnId, index) => {\n                const column = cardData.columns[columnId];\n                if (!column) {\n                  return null;\n                }\n                const tasks = column.taskIds.map(\n                  taskId => cardData.tasks[taskId]\n                );\n\n                return (\n                  <Column\n                    key={column.id}\n                    column={column}\n                    tasks={tasks}\n                    index={index}\n                    cardData={cardData}\n                    setCardData={setCardData}\n                  />\n                );\n              })}\n              {provided.placeholder}\n            </Container>\n          )}\n        </Droppable>\n      </DragDropContext>\n      <div>\n        <Button onClick={handlerVisible}>\n          <BoxSvg>\n            <SvgAdd>\n              <use href={`${sprite}#icon-plus`} />\n            </SvgAdd>\n          </BoxSvg>\n          Add another column\n        </Button>\n      </div>\n      {visible && (\n        <>\n          <AddColumn\n            closeColumnModal={handlerVisible}\n            handleSubmit={handleSubmit}\n            title={'Add column'}\n          />\n        </>\n      )}\n    </MainContainer>\n  );\n};\n","export const initialUserModel = {\n  username: 'Best User',\n  email: 'bestUser@gmail.com',\n  password: 'qwerty',\n  avatarURL: '',\n  token: '',\n  theme: 'LIGHT',\n  boards: [\n    {\n      id: '329bbadef31894837aed37f3a6843c396',\n      title: 'Best board',\n      icon: 'vector',\n      background: 'forest',\n      boardsData: {\n        tasks: {\n          '19f0d88c3a50a45f0aa8a111c4dfdd70f': {\n            id: '19f0d88c3a50a45f0aa8a111c4dfdd70f',\n            title: 'Add tasks',\n            description: 'Figure out what to do',\n            priority: 'priority',\n            deadline: '15:00 15.08.2023',\n          },\n          '176d3b628c5f44bff97861b5b083a3ff0': {\n            id: '176d3b628c5f44bff97861b5b083a3ff0',\n            title: 'Create a repository',\n            description: 'Instruct someone to create a project repositoryo',\n            priority: 'priority',\n            deadline: '15:00 15.08.2023',\n          },\n        },\n        columns: {\n          '25028b3f295854125bb413ce1a484c0c8': {\n            id: '25028b3f295854125bb413ce1a484c0c8',\n            title: 'To do',\n            taskIds: [\n              '19f0d88c3a50a45f0aa8a111c4dfdd70f',\n              '176d3b628c5f44bff97861b5b083a3ff0',\n            ],\n          },\n          '2622aab9120e046c3971cb4de36555e64': {\n            id: '2622aab9120e046c3971cb4de36555e64',\n            title: 'In progress',\n            taskIds: [],\n          },\n        },\n        columnOrder: [\n          '25028b3f295854125bb413ce1a484c0c8',\n          '2622aab9120e046c3971cb4de36555e64',\n        ],\n      },\n    },\n  ],\n};\n","import styled from '@emotion/styled';\n\nexport const ContainerDashboard = styled.div`\n  width: 100%;\n  background: var(--board_bgc);\n`;\n","import { useState } from 'react';\n\nimport { HeaderDashboard } from 'components/HeaderDashboard/HeaderDashboard';\nimport { MainDashboard } from 'components/MainDashboard/MainDashboard';\nimport { initialUserModel } from 'schemas/initialUserModal';\nimport { ContainerDashboard } from './Dashboard.styled';\n\nexport const Dashboard = () => {\n  // в cardData я поместил именно обект boardsData отдельной boards\n  const [cardData, setCardData] = useState(\n    initialUserModel.boards[0].boardsData\n  );\n\n  return (\n    <ContainerDashboard>\n      <HeaderDashboard />\n      <MainDashboard cardData={cardData} setCardData={setCardData} />\n    </ContainerDashboard>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const HomeContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 100%;\n`;\n\nexport const TitlePage = styled.h1`\n  margin: 0 auto;\n  font-size: 14px;\n  font-style: normal;\n  font-weight: 400;\n  text-align: center;\n  line-height: 18px;\n  letter-spacing: -0.28px;\n  width: 486px;\n`;\n\nexport const LinkToCreate = styled.a`\n  color: #bedbb0;\n`;\n\nexport const Container = styled.div`\ndisplay: flex;\n`","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport Header from 'components/Header/Header';\nimport { Sidebar } from 'components/Sidebar/Sidebar';\nimport { Dashboard } from 'components/Dashboard/Dashboard';\nimport { selectUser } from 'redux/auth/selectors';\nimport { Container } from './HomePage.styled';\n\nconst HomePage = () => {\n  const user = useSelector(selectUser);\n  const userTheme = user.theme || 'light';\n\n  return (\n    <Container className={`theme-${userTheme}`}>\n      <Sidebar theme={userTheme} />\n      <div style={{ width: '100%' }}>\n        <Header theme={userTheme} />\n        <Dashboard theme={userTheme} />\n      </div>\n    </Container>\n  );\n};\n\nexport default HomePage;\n\n\n// import React from 'react';\n// import { useSelector } from 'react-redux';\n// import Header from 'components/Header/Header';\n// import { Sidebar } from 'components/Sidebar/Sidebar';\n// import { Dashboard } from 'components/Dashboard/Dashboard';\n// import { Container } from './HomePage.styled';\n\n// const HomePage = () => {\n//   const theme = useSelector(state => state.auth.theme); // Отримати тему з Redux-сторі\n\n//   // Функція для встановлення класу теми на <html> елементі\n//   const setThemeClass = theme => {\n//     document.documentElement.className = '';\n//     document.documentElement.classList.add(`theme-${theme}`);\n//   };\n\n//   React.useEffect(() => {\n//     setThemeClass(theme); // Встановити клас теми під час завантаження сторінки\n//   }, [theme]);\n\n//   return (\n//     <Container>\n//       <Sidebar theme={theme} />\n//       <div style={{ width: '100%' }}>\n//         <Header theme={theme} />\n//         <Dashboard theme={theme} />\n//       </div>\n//     </Container>\n//   );\n// };\n\n// export default HomePage;\n\n\n// import React from 'react';\n// import { useSelector } from 'react-redux';\n// import { ThemeProvider } from 'hooks/themeContext';\n// import Header from 'components/Header/Header';\n// import { Sidebar } from 'components/Sidebar/Sidebar';\n// import { Dashboard } from 'components/Dashboard/Dashboard';\n// import { selectUser } from 'redux/auth/selectors'; // Підключити селектор для теми\n// import { Container } from './HomePage.styled';\n\n// const HomePage = () => {\n//   const theme = useSelector(selectUser); // Отримати тему з Redux-сторі\n\n//   // Якщо користувач не має встановленої теми, використовувати світлу тему за замовчуванням\n//   const userTheme = theme || 'light';\n\n//   return (\n//     <ThemeProvider>\n//       <Container>\n//         <Sidebar theme={userTheme} />\n//         <div style={{ width: '100%' }}>\n//           <Header theme={userTheme} />\n//           {/* Використовувати тему користувача для відображення */}\n//           <Dashboard theme={userTheme} />\n//         </div>\n//       </Container>\n//     </ThemeProvider>\n//   );\n// };\n\n// export default HomePage;\n\n\n\n// import React from 'react';\n// import { useSelector } from 'react-redux';\n// import Header from 'components/Header/Header';\n// import { Sidebar } from 'components/Sidebar/Sidebar';\n// import { Dashboard } from 'components/Dashboard/Dashboard';\n// // import { selectUser } from 'redux/auth/selectors';\n// import { Container } from './HomePage.styled';\n\n// const HomePage = () => {\n//   const theme = useSelector(state => state.auth.theme); // Отримати тему зі стору\n\n//   return (\n//     <Container className={`theme-${theme}`}>\n//       <Sidebar theme={theme} />\n//       <div style={{ width: '100%' }}>\n//         <Header theme={theme} />\n//         <Dashboard theme={theme} />\n//       </div>\n//     </Container>\n//   );\n// };\n\n// export default HomePage;\n\n\n\n// import React from 'react';\n// import { useSelector } from 'react-redux';\n// import { ThemeProvider } from 'hooks/themeContext';\n// import Header from 'components/Header/Header';\n// import { Sidebar } from 'components/Sidebar/Sidebar';\n// import { Dashboard } from 'components/Dashboard/Dashboard';\n// import { selectUser } from 'redux/auth/selectors';\n// import { Container } from './HomePage.styled';\n// const HomePage = () => {\n//   const theme = useSelector(selectUser);\n\n//   return (\n//     <ThemeProvider>\n//       <Container>\n//         <Sidebar theme={theme} />\n//         <div style={{ width: '100%' }}>\n//           <Header theme={theme} />\n//           <Dashboard theme={theme} />\n//         </div>\n//       </Container>\n//     </ThemeProvider>\n//   );\n// };\n\n// export default HomePage;\n","var map = {\n\t\"./bg1.jpg\": 7381,\n\t\"./bg10.jpg\": 7029,\n\t\"./bg11.jpg\": 2844,\n\t\"./bg12.jpg\": 6648,\n\t\"./bg13.jpg\": 41,\n\t\"./bg14.jpg\": 506,\n\t\"./bg15.jpg\": 3453,\n\t\"./bg16.jpg\": 6547,\n\t\"./bg2.jpg\": 814,\n\t\"./bg3.jpg\": 8621,\n\t\"./bg4.jpg\": 5502,\n\t\"./bg5.jpg\": 6390,\n\t\"./bg6.jpg\": 1411,\n\t\"./bg7.jpg\": 4102,\n\t\"./bg8.jpg\": 1806,\n\t\"./bg9.jpg\": 1282\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 2153;"],"names":["Container","styled","_templateObject","_taggedTemplateLiteral","Avatar","_templateObject2","UserIcon","_templateObject3","Backdrop","ModalWindow","Heading","CloseBtn","_templateObject4","_ref","children","isOpen","handleClose","heading","document","body","style","overflow","window","addEventListener","event","key","ReactDOM","_jsx","onClick","_jsxs","e","stopPropagation","xlinkHref","concat","Sprite","getElementById","EditProfileModal","FormBox","Form","LabelPass","LabelText","FieldUser","Field","_templateObject5","IconUserWrapper","_templateObject6","AvatarImage","_templateObject7","SaveBtn","_templateObject8","NoneInput","_templateObject9","_templateObject10","PlusBtn","_templateObject11","TextBtn","_templateObject12","IconPlus","_templateObject13","PasswordView","_templateObject14","PasswordIcon","_templateObject15","Svg","_templateObject16","onSave","_useSelector","useSelector","selectUser","username","email","password","avatarURL","_useState","useState","_useState2","_slicedToArray","showPassword","setShowPassword","_useState3","_useState4","avatarNewURL","setAvatarNewURL","dispatch","useDispatch","togglePasswordVisibility","handleFormSubmit","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","values","wrap","_context","prev","next","console","log","updateUser","newName","newEmail","newPassword","newPhoto","updateUserAvatar","stop","_x","apply","arguments","Formik","initialValues","onSubmit","_ref3","isSubmitting","setFieldValue","type","name","alt","src","className","width","height","href","click","id","onChange","URL","createObjectURL","currentTarget","files","selectedFile","target","startsWith","formData","FormData","append","handleAvatarClick","ErrorMessage","component","eyeHide","stroke","disabled","onClose","handleCloseModal","Modal","EditProfile","theme","isEditProfileModalOpen","setIsEditProfileModalOpen","openEditProfileModal","SidebarBlock","TitleBlock","SvgLightning","Title","MyBoardTitle","BoardTitleBlock","ButtonAdd","BoardList","TitleBoard","BoardIcons","EditIcon","NeedHelpBlock","HelpContent","NeedHelpButton","SvgHelp","LogoutBtn","Flower","_templateObject17","MainButton","Input","Textarea","HelpSchema","yup","shape","required","matches","comment","min","max","handleSubmit","resetForm","result","needHelp","sent","t0","message","_x2","validationSchema","_ref4","errors","touched","submitCount","autoComplete","placeholder","resize","closeModal","NeedHelpForm","selectBoards","state","boards","addBoardSchema","Yup","title","StyledInputField","ErrorMsg","StyledSubtitle","IconsWrapper","StyledSVG","StyledRadioField","BgImagesWrapper","icons","backgrounds","btnContent","boardData","icon","background","newBoard","uuidv4","replace","boardsData","tasks","columns","columnOrder","createBoard","editBoard","_id","handleChange","value","map","checked","sprite","nanoid","i","require","actionsList","Sidebar","isModalOpen","setIsModalOpen","modalType","setModalType","_useState5","_useState6","setBoardData","_useState7","_useState8","isShow","setIsShow","useEffect","getBoards","toggleModal","handleModalType","buttonAction","ariaLabel","editButtonId","getAttribute","filter","board","deleteBoard","ModalBoard","NeedHelpModal","logOut","ThemeContainer","ThemeList","ThemeItem","currentTheme","setCurrentTheme","classList","remove","add","onHandleTheme","newTheme","toUpperCase","localStorage","setItem","error","label","option","MenuIcon","HeaderWrap","HeaderNav","SelectIcon","Text","isSideBarOpen","setSideBarOpen","isThemeSelectorOpen","setThemeSelectorOpen","timeout","storedTheme","getItem","setTimeout","handleOutsideClick","removeEventListener","clearTimeout","closest","ThemeSelector","UserInfo","HeadContainer","HeadText","HeaderDashboard","LineContainer","TaskContainer","props","isDragging","TaskTitle","TaskDesc","TaskVector","TaskBox","TaskContent","TaskPrior","TaskDeadline","TestListIcon","Task","task","index","Draggable","draggableId","provided","snapshot","_objectSpread","draggableProps","dragHandleProps","ref","innerRef","description","deadline","Button","BoxAddSvg","SvgAdd","text","FormContainer","nameTitle","visible","setVisible","setTitle","BtnColumn","closeColumnModal","ModalColumn","TitleBox","BoxSvg","TaskList","isDraggingOver","ContainerModal","Column","column","cardData","setCardData","dataForModal","titleTask","setTitleTask","showEditModal","setShowEditModal","handleVisible","handleVisibleEdit","taskId","newTask","_defineProperty","priority","columnId","newColumn","taskIds","_toConsumableArray","prevCardData","handleEdit","handleSubmitEdit","data","handleDelete","length","newColumns","Droppable","droppableId","droppableProps","AddColumn","MainContainer","MainDashboard","handlerVisible","DragDropContext","onDragStart","color","transition","onDragUpdate","update","destination","opacity","Object","keys","backgroundColor","onDragEnd","_objectSpread3","source","start","finish","startTaskIds","Array","from","splice","newStart","finishTaskIds","newFinish","newState","newTaskId","newColumnOrder","direction","_Fragment","initialUserModel","ContainerDashboard","Dashboard","userTheme","Header","webpackContext","req","webpackContextResolve","__webpack_require__","o","Error","code","resolve","module","exports"],"sourceRoot":""}