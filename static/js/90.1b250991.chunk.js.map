{"version":3,"file":"static/js/90.1b250991.chunk.js","mappings":"wUAEaA,GAAYC,GAAAA,EAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,+EAOtBC,GAASH,GAAAA,EAAAA,IAAUI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,+JAShBG,GAAWL,GAAAA,EAAAA,IAAUM,IAAAA,GAAAJ,EAAAA,EAAAA,GAAA,4F,4CCfxBK,IAAUP,EAAAA,GAAAA,GAAOQ,GAAAA,GAAPR,CAAYC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,8LAWtBO,GAAYT,GAAAA,EAAAA,MAAYI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,iDAKxBQ,GAAYV,GAAAA,EAAAA,MAAYM,IAAAA,GAAAJ,EAAAA,EAAAA,GAAA,0BAIxBS,IAAYX,EAAAA,GAAAA,GAAOY,GAAAA,GAAPZ,CAAaa,IAAAA,GAAAX,EAAAA,EAAAA,GAAA,+jBA6BzBY,GAAkBd,GAAAA,EAAAA,MAAYe,IAAAA,GAAAb,EAAAA,EAAAA,GAAA,4KAU9Bc,GAAchB,GAAAA,EAAAA,IAAUiB,IAAAA,GAAAf,EAAAA,EAAAA,GAAA,iEAMxBgB,GAAUlB,GAAAA,EAAAA,OAAamB,IAAAA,GAAAjB,EAAAA,EAAAA,GAAA,meAkCvBkB,IAPYpB,GAAAA,EAAAA,MAAYqB,IAAAA,GAAAnB,EAAAA,EAAAA,GAAA,kFAOZF,GAAAA,EAAAA,MAAYsB,IAAAA,GAAApB,EAAAA,EAAAA,GAAA,6BAIxBqB,GAAUvB,GAAAA,EAAAA,OAAawB,IAAAA,GAAAtB,EAAAA,EAAAA,GAAA,4XAwBvBuB,IAAUzB,EAAAA,GAAAA,GAAOQ,GAAAA,GAAPR,CAAY0B,IAAAA,GAAAxB,EAAAA,EAAAA,GAAA,oLAUtByB,GAAW3B,GAAAA,EAAAA,IAAU4B,IAAAA,GAAA1B,EAAAA,EAAAA,GAAA,+EAOrB2B,GAAe7B,GAAAA,EAAAA,KAAW8B,IAAAA,GAAA5B,EAAAA,EAAAA,GAAA,mFAO1B6B,GAAe/B,GAAAA,EAAAA,IAAUgC,IAAAA,GAAA9B,EAAAA,EAAAA,GAAA,yEAOzB+B,GAAMjC,GAAAA,EAAAA,IAAUkC,IAAAA,GAAAhC,EAAAA,EAAAA,GAAA,+F,qDCP7B,GAjIoB,SAAHiC,GAAqB,IAAfC,EAAOD,EAAPC,QACrBC,GACEC,EAAAA,EAAAA,IAAYC,GAAAA,IADNC,EAAQH,EAARG,SAAUC,EAAKJ,EAALI,MAAOC,EAAKL,EAALK,MAAOC,EAAQN,EAARM,SAAUC,EAASP,EAATO,UAE1CC,GAAwCC,EAAAA,EAAAA,WAAS,GAAMC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAhDI,EAAYF,EAAA,GAAEG,EAAeH,EAAA,GACpCI,GAAwCL,EAAAA,EAAAA,UAASF,GAAUQ,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAApDE,EAAYD,EAAA,GAAEE,EAAeF,EAAA,GAE9BG,GAAWC,EAAAA,EAAAA,MAEXC,EAA2B,WAC/BP,GAAiBD,EACnB,EAEMS,EAAgB,eAAAC,GAAAC,EAAAA,GAAAA,IAAAC,EAAAA,GAAAA,KAAAC,MAAG,SAAAC,EAAMC,GAAU,OAAAH,EAAAA,GAAAA,KAAAI,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACvCC,QAAQC,IAAIN,GACZT,GACEgB,EAAAA,GAAAA,IAAW,CACT/B,SAAUwB,EAAWQ,QACrB9B,MAAOsB,EAAWS,SAClB9B,SAAUqB,EAAWU,YACrBjC,MAAAA,KAGAY,IAAiBW,EAAWW,UAC9BpB,GAASqB,EAAAA,GAAAA,IAAiBvB,IAC3B,wBAAAa,EAAAW,OAAA,GAAAd,EAAA,KACF,gBAbqBe,GAAA,OAAAnB,EAAAoB,MAAA,KAAAC,UAAA,KAyBtB,OACEC,EAAAA,GAAAA,KAAA,OAAAC,UACED,EAAAA,GAAAA,KAACE,GAAAA,GAAM,CACLC,cAAe,CACbT,SAAUtB,EACVmB,QAAShC,EACTiC,SAAU/B,EACVgC,YAAa/B,GAEf0C,SAAU3B,EAAiBwB,SAE1B,SAAAI,GAAA,IAAGC,EAAYD,EAAZC,aAAcC,EAAMF,EAANE,OAAQC,EAAaH,EAAbG,cAAa,OACrCC,EAAAA,GAAAA,MAACnF,GAAO,CAAA2E,SAAA,EACNQ,EAAAA,GAAAA,MAAC5E,GAAe,CAAAoE,SAAA,CACbM,EAAOb,UACNM,EAAAA,GAAAA,KAACjE,GAAW,CACV2E,KAAK,OACLC,KAAK,WACLC,IAAI,SACJC,IAAKN,EAAOb,YAGdM,EAAAA,GAAAA,KAAA,OAAKc,UAAU,YAAYC,MAAM,KAAKC,OAAO,KAAIf,UAC/CD,EAAAA,GAAAA,KAAA,OAAKiB,KAAI,GAAAC,OAAKC,GAAAA,EAAM,mBAGxBV,EAAAA,GAAAA,MAACnE,GAAO,CACNoE,KAAK,SACLU,QAAS,kBAAMC,SAASC,eAAe,iBAAiBC,OAAO,EAACtB,SAAA,EAEhED,EAAAA,GAAAA,KAACtD,GAAQ,CAAAuD,UACPD,EAAAA,GAAAA,KAAA,OAAKiB,KAAI,GAAAC,OAAKC,GAAAA,EAAM,sBAEtBnB,EAAAA,GAAAA,KAAC7D,GAAS,CACRuE,KAAK,OACLc,GAAG,gBACHb,KAAK,WACLc,SAAU,SAAAC,GACRlB,EACE,WACAmB,IAAIC,gBAAgBF,EAAMG,cAAcC,MAAM,KAlDxC,SAAAC,GACxBA,EAAEC,iBACF,IAAMC,EAAeF,EAAEG,OAAOJ,MAAM,GACpC,GAAIG,GAAgBA,EAAavB,KAAKyB,WAAW,UAAW,CAC1D,IAAMC,EAAW,IAAIC,SACrBD,EAASE,OAAO,SAAUL,GAC1B5D,EAAgB+D,EAClB,CACF,CA4CkBG,CAAkBb,EACpB,WAKNjB,EAAAA,GAAAA,MAAChF,GAAS,CAAAwE,SAAA,EACRD,EAAAA,GAAAA,KAACtE,GAAS,CAACgF,KAAK,OAAOC,KAAK,aAC5BX,EAAAA,GAAAA,KAACwC,GAAAA,GAAY,CAAC7B,KAAK,UAAU8B,UAAU,YAGzChC,EAAAA,GAAAA,MAAChF,GAAS,CAAAwE,SAAA,EACRD,EAAAA,GAAAA,KAACtE,GAAS,CAACgF,KAAK,QAAQC,KAAK,cAC7BX,EAAAA,GAAAA,KAACwC,GAAAA,GAAY,CAAC7B,KAAK,WAAW8B,UAAU,YAG1ChC,EAAAA,GAAAA,MAACjF,GAAS,CAAAyE,SAAA,EACRD,EAAAA,GAAAA,KAACtE,GAAS,CACRgF,KAAM1C,EAAe,OAAS,WAC9BwD,GAAG,cAELxB,EAAAA,GAAAA,KAACpD,GAAY,CAACwE,QAAS5C,EAAyByB,SAC7CjC,GACCgC,EAAAA,GAAAA,KAAClD,GAAY,CAAC+D,IAAK6B,GAAAA,EAAS9B,IAAI,mBAEhCZ,EAAAA,GAAAA,KAAChD,GAAG,CAAAiD,UACFD,EAAAA,GAAAA,KAAA,OAAK2C,OAAO,OAAO1B,KAAI,GAAAC,OAAKC,GAAAA,EAAM,wBAIxCnB,EAAAA,GAAAA,KAACwC,GAAAA,GAAY,CAAC7B,KAAK,cAAc8B,UAAU,YAG7CzC,EAAAA,GAAAA,KAAC/D,GAAO,CACNyE,KAAK,SACLkC,SAAUtC,EACVc,QAAS,WACP3C,EAAiB8B,GACjBpD,GACF,EAAE8C,UAEFD,EAAAA,GAAAA,KAACxD,GAAO,CAAAyD,SAAC,aAEH,KAKpB,ECnIA,GAlByB,SAAH/C,GAAqB,IAAfC,EAAOD,EAAPC,QACpB0F,EAAmB,WACvB1F,GACF,EAEA,OACE6C,EAAAA,GAAAA,KAAA,OAAAC,UACED,EAAAA,GAAAA,KAAC8C,GAAAA,EAAK,CACJC,QAAQ,EACRC,YAAaH,EACbI,QAAS,eAAehD,UAExBD,EAAAA,GAAAA,KAACkD,GAAW,CAAC/F,QAAS0F,OAI9B,ECsBA,GAlCiB,SAAH3F,GAAmB,IAAbM,EAAKN,EAALM,MAClBJ,GAAgCC,EAAAA,EAAAA,IAAYC,GAAAA,IAApCC,EAAQH,EAARG,SAAUI,EAASP,EAATO,UAClBC,GAA4DC,EAAAA,EAAAA,WAAS,GAAMC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAApEuF,EAAsBrF,EAAA,GAAEsF,EAAyBtF,EAAA,GAElDuF,EAAuB,WAC3BD,GAA0B,EAC5B,EAMA,OACE3C,EAAAA,GAAAA,MAAC3F,GAAS,CAAAmF,SAAA,EACRD,EAAAA,GAAAA,KAAA,OAAAC,SAAM1C,IACLI,GACCqC,EAAAA,GAAAA,KAAC9E,GAAM,CACL2F,IAAKlD,EACLiD,IAAI,cACJQ,QAASiC,KAGXrD,EAAAA,GAAAA,KAAC5E,GAAQ,CACP0F,UAAS,mBAAAI,OAAqB1D,GAC9B4D,QAASiC,EAAqBpD,UAE9BD,EAAAA,GAAAA,KAAA,OAAKiB,KAAI,GAAAC,OAAKC,GAAAA,EAAM,kBAGvBgC,IAA0BnD,EAAAA,GAAAA,KAACsD,GAAgB,CAACnG,QArBnB,WAC5BiG,GAA0B,EAC5B,MAsBF,E,WCpCaG,GAAexI,GAAAA,EAAAA,MAAYC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,wXAqB3BuI,GAAazI,GAAAA,EAAAA,IAAUI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,4EAKvBwI,GAAe1I,GAAAA,EAAAA,IAAUM,IAAAA,GAAAJ,EAAAA,EAAAA,GAAA,wFAMzByI,GAAQ3I,GAAAA,EAAAA,GAASa,IAAAA,GAAAX,EAAAA,EAAAA,GAAA,0KAOjB0I,GAAe5I,GAAAA,EAAAA,EAAQe,IAAAA,GAAAb,EAAAA,EAAAA,GAAA,+IAQvB2I,GAAkB7I,GAAAA,EAAAA,IAAUiB,IAAAA,GAAAf,EAAAA,EAAAA,GAAA,qRAa5B4I,GAAY9I,GAAAA,EAAAA,OAAamB,IAAAA,GAAAjB,EAAAA,EAAAA,GAAA,sTAiBzB6I,GAAY/I,GAAAA,EAAAA,GAASqB,IAAAA,GAAAnB,EAAAA,EAAAA,GAAA,6HAOrB8I,GAAahJ,GAAAA,EAAAA,IAAUsB,IAAAA,GAAApB,EAAAA,EAAAA,GAAA,0GAOvB+I,GAAajJ,GAAAA,EAAAA,IAAUwB,IAAAA,GAAAtB,EAAAA,EAAAA,GAAA,kDAIvBgJ,GAAWlJ,GAAAA,EAAAA,IAAU0B,IAAAA,GAAAxB,EAAAA,EAAAA,GAAA,wHASrBiJ,GAAanJ,GAAAA,EAAAA,OAAa4B,IAAAA,GAAA1B,EAAAA,EAAAA,GAAA,kJAU1BkJ,GAAgBpJ,GAAAA,EAAAA,IAAU8B,IAAAA,GAAA5B,EAAAA,EAAAA,GAAA,mOAc1BmJ,GAAcrJ,GAAAA,EAAAA,EAAQgC,IAAAA,GAAA9B,EAAAA,EAAAA,GAAA,6IAQtBoJ,GAAiBtJ,GAAAA,EAAAA,OAAakC,IAAAA,GAAAhC,EAAAA,EAAAA,GAAA,8KAU9BqJ,GAAUvJ,GAAAA,EAAAA,IAAUwJ,IAAAA,GAAAtJ,EAAAA,EAAAA,GAAA,8HAOpBuJ,GAAYzJ,GAAAA,EAAAA,OAAa0J,IAAAA,GAAAxJ,EAAAA,EAAAA,GAAA,0WAoBzByJ,GAAS3J,GAAAA,EAAAA,IAAU4J,IAAAA,GAAA1J,EAAAA,EAAAA,GAAA,qDAKnB2J,IAAM7J,EAAAA,GAAAA,GAAO8J,GAAAA,GAAP9J,CAAe+J,IAAAA,GAAA7J,EAAAA,EAAAA,GAAA,yECnLrB8J,GAAahK,GAAAA,EAAAA,OAAaC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,oXCC1B+J,IAAQjK,EAAAA,GAAAA,GAAOY,GAAAA,GAAPZ,CAAaC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,6gBAyBrBgK,IAAWlK,EAAAA,GAAAA,GAAOY,GAAAA,GAAPZ,CAAaI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,sf,WC1BxBiK,GAAaC,GAAAA,KAAaC,MAAM,CAC3C3H,MAAO0H,GAAAA,KAAa1H,MAAM,wBAAwB4H,SAAS,qBAAqBC,QAC9E,mDACA,wBAEFC,QAASJ,GAAAA,KAAaK,IAAI,GAAI,0CAA0CC,IAAI,IAAK,4CAA4CJ,SAAS,yBCClIlF,GAAgB,CACpB1C,MAAO,GACP8H,QAAS,IAyDX,GAtDqB,SAAHrI,GAA8B,IAAxB2F,EAAgB3F,EAAhB2F,iBAChBvE,GAAWC,EAAAA,EAAAA,MAEXmH,EAAY,eAAArF,GAAA1B,EAAAA,GAAAA,IAAAC,EAAAA,GAAAA,KAAAC,MAAG,SAAAC,EAAOyB,EAAM7B,GAAA,IAAAiH,EAAAlI,EAAA8H,EAAAK,EAAA,OAAAhH,EAAAA,GAAAA,KAAAI,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAEA,OAFIwG,EAASjH,EAATiH,UAC5BlI,EAAmB8C,EAAnB9C,MAAO8H,EAAYhF,EAAZgF,QACfnG,QAAQC,IAAI,CAAE5B,MAAAA,EAAO8H,QAAAA,IAAWtG,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAETb,GAASuH,EAAAA,GAAAA,IAAS,CAAEpI,MAAAA,EAAO8H,QAAAA,KAAY,KAAD,EAArDK,EAAM3G,EAAA6G,KACRD,GAAAA,GAAAA,UAAAA,MAAyBD,KAC3BxG,QAAQC,IAAI,sBACZsG,EAAUxF,IACV0C,KAED5D,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAA8G,GAAA9G,EAAA,SAEDG,QAAQC,IAAI,SAAUJ,EAAA8G,GAAIC,SAAS,yBAAA/G,EAAAW,OAAA,GAAAd,EAAA,mBAEtC,gBAdiBe,EAAAoG,GAAA,OAAA5F,EAAAP,MAAA,KAAAC,UAAA,KAgBlB,OACEC,EAAAA,GAAAA,KAAA,OAAAC,UACED,EAAAA,GAAAA,KAACE,GAAAA,GAAM,CACLC,cAAeA,GACf+F,iBAAkBhB,GAClB9E,SAAUsF,EAAazF,SAEtB,SAAAkG,GAAA,IAAGC,EAAMD,EAANC,OAAQC,EAAOF,EAAPE,QAASC,EAAWH,EAAXG,YAAW,OAC9B7F,EAAAA,GAAAA,MAAClF,GAAAA,GAAI,CAACgL,aAAa,MAAKtG,SAAA,EACtBD,EAAAA,GAAAA,KAACgF,GAAK,CAACtE,KAAK,QAAQC,KAAK,QAAQ6F,YAAY,mBAC7CxG,EAAAA,GAAAA,KAACwC,GAAAA,GAAY,CAAC7B,KAAK,WACnBF,EAAAA,GAAAA,MAAA,OAAAR,SAAA,EACED,EAAAA,GAAAA,KAACiF,GAAQ,CACPxC,UAAU,WACV9B,KAAK,UACL6F,YAAY,UACZC,MAAO,CACLC,OAAQ,WAGZ1G,EAAAA,GAAAA,KAACwC,GAAAA,GAAY,CAAC7B,KAAK,YAClB2F,EAAc,GACbF,EAAOb,WACLc,EAAQd,SAAWc,EAAQd,WAC3BvF,EAAAA,GAAAA,KAAA,OAAAC,SAAK,+BAGXD,EAAAA,GAAAA,KAAC+E,GAAU,CAACrE,KAAK,SAAQT,SAAC,WACrB,KAKjB,EC/CA,GAdsB,SAAH/C,GAAwB,IAAlByJ,EAAUzJ,EAAVyJ,WACjB9D,EAAmB,WACvB8D,GACF,EAEA,OACE3G,EAAAA,GAAAA,KAAA,OAAAC,UACED,EAAAA,GAAAA,KAAC8C,GAAAA,EAAK,CAACC,QAAQ,EAAMC,YAAaH,EAAkBI,QAAS,YAAYhD,UACzED,EAAAA,GAAAA,KAAC4G,GAAY,CAAC/D,iBAAkBA,OAItC,E,WChBagE,GAAe,SAAAC,GAAK,OAAIA,EAAMC,OAAOA,MAAO,E,sBCE5CC,GAAiBC,GAAAA,KAAa7B,MAAM,CAC/C8B,MAAOD,GAAAA,KAAa5B,SAAS,uBCAlB8B,IAAmBpM,EAAAA,GAAAA,GAAOY,GAAAA,GAAPZ,CAAaC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,+cAwBhCmM,IAAWrM,EAAAA,GAAAA,GAAOyH,GAAAA,GAAPzH,CAAoBI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,qEAM/BoM,GAAiBtM,GAAAA,EAAAA,EAAQM,IAAAA,GAAAJ,EAAAA,EAAAA,GAAA,kNAWzBqM,GAAevM,GAAAA,EAAAA,IAAUa,IAAAA,GAAAX,EAAAA,EAAAA,GAAA,yFAOzBsM,GAAYxM,GAAAA,EAAAA,IAAUe,IAAAA,GAAAb,EAAAA,EAAAA,GAAA,4GAOtBuM,IAAmBzM,EAAAA,GAAAA,GAAOY,GAAAA,GAAPZ,CAAaiB,IAAAA,GAAAf,EAAAA,EAAAA,GAAA,8SAgBhCwM,GAAkB1M,GAAAA,EAAAA,IAAUmB,IAAAA,GAAAjB,EAAAA,EAAAA,GAAA,uHCtDnCyM,GAAQ,CACZ,eACA,YACA,eACA,oBACA,iBACA,iBACA,cACA,gBAGIC,GAAc,CAClB,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,OACA,OACA,OACA,OACA,OACA,OACA,QA4GF,I,SAAA,GAzGA,SAAmBzK,GAAyC,IAAtC0K,EAAU1K,EAAV0K,WAAYjB,EAAUzJ,EAAVyJ,WAAYkB,EAAS3K,EAAT2K,UACtCvJ,GAAWC,EAAAA,EAAAA,MAEX4B,EACW,WAAfyH,EACI,CACEV,MAAO,GACPY,KAAMJ,GAAM,GACZK,WAAYJ,GAAY,IAE1B,CACET,MAAgB,OAATW,QAAS,IAATA,OAAS,EAATA,EAAWX,MAClBY,KAAe,OAATD,QAAS,IAATA,OAAS,EAATA,EAAWC,KACjBC,WAAqB,OAATF,QAAS,IAATA,OAAS,EAATA,EAAWE,YA2B/B,OACE/H,EAAAA,GAAAA,KAACE,GAAAA,GAAM,CACLC,cAAeA,EACf+F,iBAAkBc,GAClB5G,SA5BiB,SAACG,EAAM7B,GAAqB,IAAjBiH,EAASjH,EAATiH,UAGxBqC,EAAW,CACfxG,GAHW,IAAAN,QAAO+G,EAAAA,GAAAA,KAASC,QAAQ,KAAM,KAIzChB,MAAO3G,EAAO2G,MAAMiB,OACpBL,KAAMvH,EAAOuH,KACbC,WAAYxH,EAAOwH,WACnBK,WAAY,CAAEC,MAAO,CAAC,EAAGC,QAAS,CAAC,EAAGC,YAAa,KAElC,WAAfX,EACFtJ,GAASkK,EAAAA,GAAAA,IAAYR,IAErBzH,EAAO2G,QAAUW,EAAUX,OAC3B3G,EAAOuH,OAASD,EAAUC,MAC1BvH,EAAOwH,aAAeF,EAAUE,YAEhCzJ,GAASmK,EAAAA,GAAAA,IAAU,CAAET,SAAAA,EAAUxG,GAAIqG,EAAUa,OAG/C/C,IACAgB,GACF,EAM2B1G,SAEtB,SAAAI,GAAA,IAAGsI,EAAYtI,EAAZsI,aAAcpI,EAAMF,EAANE,OAAM,OACtBE,EAAAA,GAAAA,MAAClF,GAAAA,GAAI,CAACgL,aAAa,MAAKtG,SAAA,EACtBD,EAAAA,GAAAA,KAACmH,GAAgB,CACfzG,KAAK,OACLC,KAAK,QACL6F,YAAY,QACZ/E,SAAUkH,EACVC,MAAOrI,EAAO2G,SAEhBlH,EAAAA,GAAAA,KAACoH,GAAQ,CAACzG,KAAK,QAAQ8B,UAAU,OACjCzC,EAAAA,GAAAA,KAACqH,GAAc,CAAApH,SAAC,WAChBD,EAAAA,GAAAA,KAACsH,GAAY,CAAArH,SACVyH,GAAMmB,KAAI,SAAAf,GAAI,OACbrH,EAAAA,GAAAA,MAAA,SAAAR,SAAA,EACED,EAAAA,GAAAA,KAACwH,GAAgB,CACf9G,KAAK,QACLC,KAAK,OACLiI,MAAOd,EACPrG,SAAUkH,EACVG,QAASvI,EAAOuH,OAASA,KAE3B9H,EAAAA,GAAAA,KAACuH,GAAS,CAAAtH,UACRD,EAAAA,GAAAA,KAAA,OAAKiB,KAAI,GAAAC,OAAK6H,GAAAA,EAAM,KAAA7H,OAAI4G,UAThBkB,EAAAA,GAAAA,MAWJ,OAGZhJ,EAAAA,GAAAA,KAACqH,GAAc,CAAApH,SAAC,gBAChBD,EAAAA,GAAAA,KAACyH,GAAe,CAAAxH,SACb0H,GAAYkB,KAAI,SAACd,EAAYkB,GAAC,OAC7BxI,EAAAA,GAAAA,MAAA,SAAAR,SAAA,EACED,EAAAA,GAAAA,KAACwH,GAAgB,CACf9G,KAAK,QACLC,KAAK,aACLiI,MAAOb,EACPtG,SAAUkH,EACVG,QAASvI,EAAOwH,aAAeA,KAEjC/H,EAAAA,GAAAA,KAAA,OACEa,IAAKqI,EAAAA,KAAAA,CAAQ,KAADhI,OAA6B6G,EAAU,SACnDnH,IAAG,sBAAAM,OAAwB+H,EAAI,GAC/BlI,MAAM,UAXEiI,EAAAA,GAAAA,MAaJ,OAGZhJ,EAAAA,GAAAA,KAAC+E,GAAU,CAACrE,KAAK,SAAQT,SAAE2H,MACtB,GAIf,ECjJA,MC+BMuB,GAAqB,MAArBA,GAAkC,OAEjC,SAASC,GAAOlM,GAAqB,IAAlBM,EAAKN,EAALM,MAAOuF,EAAM7F,EAAN6F,OAC/BnF,GAAsCC,EAAAA,EAAAA,WAAS,GAAMC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA9CyL,EAAWvL,EAAA,GAAEwL,EAAcxL,EAAA,GAClCI,GAAkCL,EAAAA,EAAAA,UAASsL,IAAgBhL,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAApDqL,EAASpL,EAAA,GAAEqL,EAAYrL,EAAA,GAC9BsL,GAAkC5L,EAAAA,EAAAA,UAAS,MAAK6L,GAAA3L,EAAAA,EAAAA,GAAA0L,EAAA,GAAzC5B,EAAS6B,EAAA,GAAEC,EAAYD,EAAA,GAC9BE,GAA4B/L,EAAAA,EAAAA,WAAS,GAAMgM,GAAA9L,EAAAA,EAAAA,GAAA6L,EAAA,GAApCE,EAAMD,EAAA,GAAEE,EAASF,EAAA,GAClB9C,GAAS1J,EAAAA,EAAAA,IAAYwJ,IACrBvI,GAAWC,EAAAA,EAAAA,OACjByL,EAAAA,EAAAA,YACE,WACE1L,GAAS2L,EAAAA,GAAAA,MACX,GACA,CAAC3L,GACDyI,GAGF,IAAMmD,EAAc,WAClBZ,GAAgBD,EAClB,EAEMc,EAAkB,SAAApI,GACtB,IAAMqI,EAAerI,EAAEF,cAAcwI,UAC/BC,EAAevI,EAAEF,cAAc0I,aAAa,kBAAoB,GAClEH,IAAiBjB,IACnBK,EAAaL,IACbe,MAEAV,EAAaL,IACbQ,EAAa5C,EAAOyD,QAAO,SAAAC,GAAK,OAAIA,EAAM/B,MAAQ4B,CAAY,IAAE,IAChEJ,IAEJ,EAUA,OACEzJ,EAAAA,GAAAA,MAAC8C,GAAY,CAACzC,UAAS,SAAAI,OAAW1D,EAAK,KAAA0D,OAAI6B,EAAS,OAAS,UAAW9C,SAAA,EACtED,EAAAA,GAAAA,KAAC4E,GAAG,CAAC8F,GAAG,IAAGzK,UACTQ,EAAAA,GAAAA,MAAC+C,GAAU,CAAAvD,SAAA,EACTD,EAAAA,GAAAA,KAACyD,GAAY,CAAAxD,UACXD,EAAAA,GAAAA,KAAA,OAAKiB,KAAI,GAAAC,OAAK6H,GAAAA,EAAM,mBAEtB/I,EAAAA,GAAAA,KAAC0D,GAAK,CAAAzD,SAAC,mBAGXD,EAAAA,GAAAA,KAAC2D,GAAY,CAAA1D,SAAC,eACdQ,EAAAA,GAAAA,MAACmD,GAAe,CAAA3D,SAAA,EACdD,EAAAA,GAAAA,KAAA,KAAAC,SAAG,wBACHD,EAAAA,GAAAA,KAAC6D,GAAS,CAAC,aAAW,MAAMnD,KAAK,SAASU,QAAS+I,EAAgBlK,UACjED,EAAAA,GAAAA,KAAA,OAAKe,MAAO,GAAIC,OAAQ,GAAGf,UACzBD,EAAAA,GAAAA,KAAA,OAAKiB,KAAI,GAAAC,OAAK6H,GAAAA,EAAM,wBAI1B/I,EAAAA,GAAAA,KAAA,MAAAC,SACG8G,EAAO8B,KAAI,SAAA4B,GAAK,OACfzK,EAAAA,GAAAA,KAAC8D,GAAS,CAAA7D,UACRQ,EAAAA,GAAAA,MAACmE,GAAG,CAAC8F,GAAE,SAAAxJ,OAAWuJ,EAAMvD,OAAQjH,SAAA,EAC9BQ,EAAAA,GAAAA,MAACsD,GAAU,CAAA9D,SAAA,EACTD,EAAAA,GAAAA,KAAA,OAAKe,MAAO,GAAIC,OAAQ,GAAGf,UACzBD,EAAAA,GAAAA,KAAA,OAAKiB,KAAI,GAAAC,OAAK6H,GAAAA,EAAM,KAAA7H,OAAIuJ,EAAM3C,UAE/B2C,EAAMvD,UAIXzG,EAAAA,GAAAA,MAACuD,GAAU,CAAA/D,SAAA,EACTD,EAAAA,GAAAA,KAACkE,GAAU,CACTxD,KAAK,SACL,aAAW,OACX,gBAAe+J,EAAM/B,IACrBtH,QAAS+I,EAAgBlK,UAEzBD,EAAAA,GAAAA,KAACiE,GAAQ,CAAAhE,UACPD,EAAAA,GAAAA,KAAA,OAAKiB,KAAI,GAAAC,OAAK6H,GAAAA,EAAM,uBAGxB/I,EAAAA,GAAAA,KAACkE,GAAU,CACTxD,KAAK,SACL,aAAW,OACX,gBAAe+J,EAAM/B,IACrBtH,QAAS+I,EAAgBlK,UAEzBD,EAAAA,GAAAA,KAACiE,GAAQ,CAAC7C,QAAS,kBAAM9C,GAASqM,EAAAA,GAAAA,IAAYF,EAAM/B,KAAK,EAACzI,UACxDD,EAAAA,GAAAA,KAAA,OAAKiB,KAAI,GAAAC,OAAK6H,GAAAA,EAAM,4BA5BZ0B,EAAM/B,IAiCV,MAGfW,IACCrJ,EAAAA,GAAAA,KAAC8C,GAAAA,EAAK,CACJC,OAAQmH,EACRlH,YAAakH,EACbjH,QAASsG,IAAcJ,GAAkB,YAAc,aAAalJ,UAEpED,EAAAA,GAAAA,KAAC4K,GAAU,CACThD,WAAY2B,IAAcJ,GAAkB,SAAW,OACvDxC,WAAYuD,EACZrC,UAAWA,OAIjBpH,EAAAA,GAAAA,MAAC0D,GAAa,CAAAlE,SAAA,EACZD,EAAAA,GAAAA,KAAC0E,GAAM,CAAC7D,I,ikHAAaD,IAAI,YACzBH,EAAAA,GAAAA,MAAC2D,GAAW,CAAAnE,SAAA,CAAC,0BACWD,EAAAA,GAAAA,KAAA,QAAAC,SAAM,YAAe,mFAG7CQ,EAAAA,GAAAA,MAAC4D,GAAc,CAAC3D,KAAK,SAASC,KAAK,OAAOS,QApF9B,WAChB2I,GAAU,EACZ,EAkFmE9J,SAAA,EAC3DD,EAAAA,GAAAA,KAACsE,GAAO,CAAArE,UACND,EAAAA,GAAAA,KAAA,OAAKiB,KAAI,GAAAC,OAAK6H,GAAAA,EAAM,kBACZ,gBAGXe,IAAU9J,EAAAA,GAAAA,KAAC6K,GAAa,CAAClE,WAtFb,WACjBoD,GAAU,EACZ,QAuFItJ,EAAAA,GAAAA,MAAC+D,GAAS,CAAC9D,KAAK,SAASC,KAAK,SAASS,QAAS,kBAAM9C,GAASwM,EAAAA,GAAAA,MAAS,EAAC7K,SAAA,EACvED,EAAAA,GAAAA,KAAA,OAAKe,MAAO,GAAIC,OAAQ,GAAGf,UACzBD,EAAAA,GAAAA,KAAA,OAAK+K,UAAS,GAAA7J,OAAK6H,GAAAA,EAAM,mBACrB,eAKd,CCtKO,I,8BAAMiC,GAAiBjQ,GAAAA,EAAAA,IAAUC,KAAAA,IAAAC,EAAAA,EAAAA,GAAA,iCAI3BgQ,GAAYlQ,GAAAA,EAAAA,GAASI,KAAAA,IAAAF,EAAAA,EAAAA,GAAA,icAqBrBiQ,GAAYnQ,GAAAA,EAAAA,GAASM,KAAAA,IAAAJ,EAAAA,EAAAA,GAAA,4PCwBlC,GA7CsB,SAAHiC,GAAqB,IAAfC,EAAOD,EAAPC,QACfK,GAAUH,EAAAA,EAAAA,IAAYC,GAAAA,IAAtBE,MACFc,GAAWC,EAAAA,EAAAA,MACjBX,GAAwCC,EAAAA,EAAAA,UAASL,GAAMM,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAhDuN,EAAYrN,EAAA,GAAEsN,EAAetN,EAAA,IAEpCkM,EAAAA,EAAAA,YAAU,WACR3I,SAASgK,KAAKC,UAAUC,OAAO,QAAS,OAAQ,UAChDlK,SAASgK,KAAKC,UAAUE,IAAIL,EAC9B,GAAG,CAACA,IAEJ,IAMMM,EAAa,eAAA/M,GAAAC,EAAAA,GAAAA,IAAAC,EAAAA,GAAAA,KAAAC,MAAG,SAAAC,EAAM4M,GAAQ,OAAA9M,EAAAA,GAAAA,KAAAI,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACR,OAA1BiM,EAAgBM,GAAUzM,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAGlBb,GAASgB,EAAAA,GAAAA,IAAW,CAAE9B,MAAOkO,EAASC,iBAAkB,KAAD,EAE7DxO,IAAU8B,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAA8G,GAAA9G,EAAA,SAEVG,QAAQwM,MAAM,0BAAyB3M,EAAA8G,IAAS,yBAAA9G,EAAAW,OAAA,GAAAd,EAAA,kBAEnD,gBAVkBe,GAAA,OAAAnB,EAAAoB,MAAA,KAAAC,UAAA,KAYnB,OACEC,EAAAA,GAAAA,KAACgL,GAAc,CAAA/K,UACbD,EAAAA,GAAAA,KAACiL,GAAS,CAAAhL,SApBO,CACnB,CAAE2I,MAAO,QAASiD,MAAO,SACzB,CAAEjD,MAAO,OAAQiD,MAAO,QACxB,CAAEjD,MAAO,SAAUiD,MAAO,WAkBRhD,KAAI,SAAAiD,GAAM,OACtB9L,EAAAA,GAAAA,KAACkL,GAAS,CAER9J,QAAS,kBAAMqK,EAAcK,EAAOlD,MAAM,EAC1C9H,UAAWqK,IAAiBW,EAAOlD,MAAQ,SAAW,GAAG3I,SAExD6L,EAAOD,OAJHC,EAAOlD,MAKF,OAKtB,EC/Ca9N,GAAYC,GAAAA,EAAAA,IAAUC,KAAAA,IAAAC,EAAAA,EAAAA,GAAA,oYAqBtB8Q,GAAWhR,GAAAA,EAAAA,IAAUI,KAAAA,IAAAF,EAAAA,EAAAA,GAAA,gOAerB+Q,GAAajR,GAAAA,EAAAA,IAAUM,KAAAA,IAAAJ,EAAAA,EAAAA,GAAA,kEAMvBgR,GAAYlR,GAAAA,EAAAA,IAAUa,KAAAA,IAAAX,EAAAA,EAAAA,GAAA,yKAWtBiR,GAAanR,GAAAA,EAAAA,IAAUe,KAAAA,IAAAb,EAAAA,EAAAA,GAAA,gIASvBkR,GAAOpR,GAAAA,EAAAA,IAAUiB,KAAAA,IAAAf,EAAAA,EAAAA,GAAA,6KCmB9B,GAlEe,WACb,IAAMqD,GAAWC,EAAAA,EAAAA,MACTf,GAAUH,EAAAA,EAAAA,IAAYC,GAAAA,IAAtBE,MACRI,GAAwCC,EAAAA,EAAAA,WAAS,GAAMC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAhDwO,EAAatO,EAAA,GAAEuO,EAAcvO,EAAA,GACpCI,GAAoDL,EAAAA,EAAAA,WAAS,GAAMM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAA5DoO,EAAmBnO,EAAA,GAAEoO,EAAoBpO,EAAA,IAEhD6L,EAAAA,EAAAA,YAAU,WACN,IAAIwC,EAUN,OARIJ,EACFI,EAAUC,YAAW,WACnBpL,SAASqL,iBAAiB,QAASC,EACrC,GAAG,KAEHtL,SAASuL,oBAAoB,QAASD,GAGjC,WACLE,aAAaL,GACbnL,SAASuL,oBAAoB,QAASD,EACxC,CACF,GAAG,CAACrO,EAAU8N,IAEd,IAAMO,EAAqB,SAAA5K,GACpBA,EAAEG,OAAO4K,QAAQ,UACpBT,GAAe,EAEnB,EAUA,OACE5L,EAAAA,GAAAA,MAAC3F,GAAS,CAAAmF,SAAA,EACRD,EAAAA,GAAAA,KAAA,OAAKoB,QAVa,WACpBiL,GAAgBD,EAClB,EAQgCnM,UAC1BD,EAAAA,GAAAA,KAAC+L,GAAQ,CAACjL,UAAS,mBAAAI,OAAqB1D,GAASuD,MAAM,KAAKC,OAAO,KAAIf,UACrED,EAAAA,GAAAA,KAAA,OAAKiB,KAAI,GAAAC,OAAKC,GAAAA,EAAM,oBAGvBiL,IAAiBpM,EAAAA,GAAAA,KAACoJ,GAAO,KAC1B3I,EAAAA,GAAAA,MAACuL,GAAU,CAAA/L,SAAA,EACTQ,EAAAA,GAAAA,MAACwL,GAAS,CAAAhM,SAAA,EACRD,EAAAA,GAAAA,KAAA,OAAAC,UACED,EAAAA,GAAAA,KAACkM,GAAU,CAACnL,MAAM,KAAKC,OAAO,KAAKI,QAfjB,WAC1BmL,GAAsBD,EACxB,EAa0ErM,UAC9DD,EAAAA,GAAAA,KAAA,OAAKiB,KAAI,GAAAC,OAAKC,GAAAA,EAAM,6BAGxBnB,EAAAA,GAAAA,KAACmM,GAAI,CAAAlM,SAAC,aAEPqM,IACCtM,EAAAA,GAAAA,KAAC+M,GAAa,CACZ5P,QAAS,kBAAMoP,GAAqB,EAAM,KAG9CvM,EAAAA,GAAAA,KAACgN,GAAQ,OAEVZ,IAAiBpM,EAAAA,GAAAA,KAACoJ,GAAO,CAAC5L,MAAOA,EAAOuF,OAAQqJ,MAGvD,ECzDatR,IAtBgBC,GAAAA,EAAAA,IAAUC,KAAAA,IAAAC,EAAAA,EAAAA,GAAA,iGAOdF,GAAAA,EAAAA,GAASI,KAAAA,IAAAF,EAAAA,EAAAA,GAAA,uLAWNF,GAAAA,EAAAA,EAAQM,KAAAA,IAAAJ,EAAAA,EAAAA,GAAA,6BAIXF,GAAAA,EAAAA,IAAUa,KAAAA,IAAAX,EAAAA,EAAAA,GAAA,2B,WCxB5B,SAASgS,KACZ,OACIjN,EAAAA,GAAAA,KAAA,OAAAC,UACID,EAAAA,GAAAA,KAAA,KAAAC,SAAG,yPAKf,CCAA,IA6BA,GA7BiB,WACf,IAAQzC,GAAUH,EAAAA,EAAAA,IAAYC,GAAAA,IAAtBE,MAEF0P,GADWC,EAAAA,GAAAA,MACSC,SAASC,OAAS,SAASA,OAUrD,OARArD,EAAAA,EAAAA,YACE,WACE3I,SAASgK,KAAKC,UAAUE,IAAIhO,EAC9B,GAEA,KAIAiD,EAAAA,GAAAA,MAAA6M,GAAAA,SAAA,CAAArN,SAAA,EACEQ,EAAAA,GAAAA,MAAC3F,GAAS,CAAAmF,SAAA,EACRD,EAAAA,GAAAA,KAACoJ,GAAO,CAAC5L,MAAOA,KAChBiD,EAAAA,GAAAA,MAAA,OAAKgG,MAAO,CAAE1F,MAAO,QAASd,SAAA,EAC5BD,EAAAA,GAAAA,KAACuN,GAAM,CAAC/P,MAAOA,KACb0P,IAAYlN,EAAAA,GAAAA,KAACiN,GAAS,CAACzP,MAAOA,WAGpCwC,EAAAA,GAAAA,KAAClF,GAAS,CAAAmF,UACRD,EAAAA,GAAAA,KAACwN,GAAAA,GAAM,QAIf,C,uBCnCA,IAAI3E,EAAM,CACT,YAAa,KACb,aAAc,KACd,aAAc,KACd,aAAc,KACd,aAAc,GACd,aAAc,IACd,aAAc,KACd,aAAc,KACd,YAAa,IACb,YAAa,KACb,YAAa,KACb,YAAa,KACb,YAAa,KACb,YAAa,KACb,YAAa,KACb,YAAa,MAId,SAAS4E,EAAeC,GACvB,IAAIlM,EAAKmM,EAAsBD,GAC/B,OAAOE,EAAoBpM,EAC5B,CACA,SAASmM,EAAsBD,GAC9B,IAAIE,EAAoBC,EAAEhF,EAAK6E,GAAM,CACpC,IAAI3L,EAAI,IAAI+L,MAAM,uBAAyBJ,EAAM,KAEjD,MADA3L,EAAEgM,KAAO,mBACHhM,CACP,CACA,OAAO8G,EAAI6E,EACZ,CACAD,EAAeO,KAAO,WACrB,OAAOC,OAAOD,KAAKnF,EACpB,EACA4E,EAAeS,QAAUP,EACzBQ,EAAOC,QAAUX,EACjBA,EAAejM,GAAK,I","sources":["components/UserInfo/UserInfo.styled.jsx","components/EditProfile/EditProfile.styled.jsx","components/EditProfile/EditProfile.jsx","components/EditProfile/EditProfileModal.jsx","components/UserInfo/UserInfo.jsx","components/Sidebar/Sidebar.styled.jsx","components/Button/Button.jsx","components/NeedHelp/NeedHelp.styled.js","schemas/helpSchema.js","components/NeedHelp/NeedHelpForm.jsx","components/NeedHelp/NeedHelpModal.jsx","redux/boards/boardsSelectors.js","schemas/addBoardSchema.js","components/ModalBoard/ModalBoard.styles.js","components/ModalBoard/ModalBoard.jsx","components/ModalBoard/index.js","components/Sidebar/Sidebar.jsx","components/ThemeSelector/ThemeSelector.styled.jsx","components/ThemeSelector/ThemeSelector.jsx","components/Header/Header.styled.jsx","components/Header/Header.jsx","pages/HomePage/HomePage.styled.js","components/EmptyPage/EmptyPage.jsx","pages/HomePage/HomePage.jsx","images/backgrounds|sync|/^/.//.*/.jpg$"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Container = styled.div`\ndisplay: flex;\nalign-items: center;\ngap: 8px;\nmargin-left: 14px;\n`;\n\nexport const Avatar = styled.img`\n  width: 32px;\n  height: 32px;\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-position: center;\n  cursor: pointer;\n    `;\n\n   export const UserIcon = styled.svg`\n  width: 32px;\n  height: 32px;\n  cursor: pointer;\n  stroke: transparent;\n     `;","import styled from '@emotion/styled';\nimport { Form, Field } from 'formik';\n\nexport const FormBox = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  gap: 14px;\n  font-size: 14px;\n  font-weight: 400;\n  letter-spacing: -0.28px;\n`;\n\nexport const LabelPass = styled.label`\n  position: relative;\n  width: 100%;\n`;\n\nexport const LabelText = styled.label`\n  width: 100%;\n`;\n\nexport const FieldUser = styled(Field)`\n  width: 100%;\n  height: 49px;\n  color: var(--modal_main_color);\n  background-color: var(--modal_field);\n  opacity: 0.4;\n  border: 1px solid var(--input_color);\n  padding-left: 18px;\n  box-shadow: 0px 4px 16px rgba(22, 22, 22, 0.08);\n  border-radius: 8px;\n\n  outline: none;\n  transition: all 500ms;\n\n  &:hover,\n  &:focus,\n  &:active {\n    opacity: 1;\n    box-shadow: 0px 4px 16px 0px rgba(22, 22, 22, 0.08);\n  }\n\n  @media screen and (min-width: 375px) {\n    width: 287px;\n  }\n  @media screen and (min-width: 768px) {\n    width: 352px;\n  }\n`;\n\nexport const IconUserWrapper = styled.label`\n  width: 68px;\n  height: 78px;\n  position: relative;\n  margin: 0px auto 14px auto;\n  border-radius: 8px;\n  background-position: center;\n  cursor: pointer;\n`;\n\nexport const AvatarImage = styled.img`\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n`;\n\nexport const SaveBtn = styled.button`\n  width: 100%;\n  height: 49px;\n  margin-top: 24px;\n  text-align: center;\n  font-family: Poppins;\n  font-size: 14px;\n  font-style: normal;\n  font-weight: 500;\n  line-height: normal;\n  letter-spacing: -0.28px;\n  background: var(--create_normal);\n  border-radius: 8px;\n  border: 1px solid var(--create_normal);\n  cursor: pointer;\n\n  &:hover,\n  &:focus,\n  &:active {\n    opacity: 0.8;\n  }\n\n  @media screen and (max-width: 768px) {\n    width: 250px;\n  }\n`;\n\nexport const FileInput = styled.input`\n  position: absolute;\n  opacity: 0;\n  display: none;\n  width: 100%;\n`;\n\nexport const NoneInput = styled.input`\n  display: none;\n`;\n\nexport const PlusBtn = styled.button`\n  position: absolute;\n  bottom: -15%;\n  left: 30%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border-radius: 8px;\n\n  width: 28px;\n  height: 28px;\n  border: none;\n  background: var(--user_bgc);\n\n  transition: all 150ms linear;\n  cursor: pointer;\n\n  &:hover,\n  &:focus,\n  &:active {\n    background: var(--create_active);\n  }\n`;\n\nexport const TextBtn = styled(Form)`\n  font-family: Poppins;\n  font-size: 14px;\n  font-style: normal;\n  font-weight: 500;\n  line-height: normal;\n  letter-spacing: -0.28px;\n  color: var(--save-color);\n`;\n\nexport const IconPlus = styled.svg`\n  width: 14px;\n  height: 14px;\n  stroke: #161616;\n  z-index: 99;\n`;\n\nexport const PasswordView = styled.span`\n  position: absolute;\n  right: 18px;\n  top: 19px;\n  cursor: pointer;\n`;\n\nexport const PasswordIcon = styled.img`\n  width: 16.5px;\n  height: 16px;\n  top: 50%;\n  right: 4px;\n`;\n\nexport const Svg = styled.svg`\n  width: 16.5px;\n  height: 16px;\n  top: 50%;\n  right: 4px;\n  fill: transparent;\n`;\n","import React from 'react';\nimport { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Formik, ErrorMessage } from 'formik';\nimport {\n  FormBox,\n  AvatarImage,\n  FieldUser,\n  NoneInput,\n  PlusBtn,\n  IconPlus,\n  IconUserWrapper,\n  SaveBtn,\n  PasswordView,\n  PasswordIcon,\n  Svg,\n  LabelPass,\n  LabelText,\n  TextBtn,\n} from './EditProfile.styled';\nimport { updateUser, updateUserAvatar } from 'redux/auth/operations';\nimport { selectUser } from 'redux/auth/selectors';\nimport Sprite from '../../images/sprite.svg';\nimport eyeHide from '../../images/eye-hide.svg';\n\nconst EditProfile = ({ onClose }) => {\n  const { username, theme, email, password, avatarURL } =\n    useSelector(selectUser);\n  const [showPassword, setShowPassword] = useState(false);\n  const [avatarNewURL, setAvatarNewURL] = useState(avatarURL);\n\n  const dispatch = useDispatch();\n\n  const togglePasswordVisibility = () => {\n    setShowPassword(!showPassword);\n  };\n\n  const handleFormSubmit = async formValues => {\n    console.log(formValues);\n    dispatch(\n      updateUser({\n        username: formValues.newName,\n        email: formValues.newEmail,\n        password: formValues.newPassword,\n        theme,\n      })\n    );\n    if (avatarNewURL !== formValues.newPhoto) {\n      dispatch(updateUserAvatar(avatarNewURL));\n    }\n  };\n\n  const handleAvatarClick = e => {\n    e.preventDefault();\n    const selectedFile = e.target.files[0];\n    if (selectedFile && selectedFile.type.startsWith('image/')) {\n      const formData = new FormData();\n      formData.append('avatar', selectedFile);\n      setAvatarNewURL(formData);\n    }\n  };\n\n  return (\n    <div>\n      <Formik\n        initialValues={{\n          newPhoto: avatarNewURL,\n          newName: username,\n          newEmail: email,\n          newPassword: password,\n        }}\n        onSubmit={handleFormSubmit}\n      >\n        {({ isSubmitting, values, setFieldValue }) => (\n          <FormBox>\n            <IconUserWrapper>\n              {values.newPhoto ? (\n                <AvatarImage\n                  type=\"file\"\n                  name=\"newPhoto\"\n                  alt=\"Avatar\"\n                  src={values.newPhoto}\n                />\n              ) : (\n                <svg className=\"icon-user\" width=\"68\" height=\"68\">\n                  <use href={`${Sprite}#icon-user`} />\n                </svg>\n              )}\n              <PlusBtn\n                type=\"button\"\n                onClick={() => document.getElementById('newPhotoInput').click()}\n              >\n                <IconPlus>\n                  <use href={`${Sprite}#icon-plus-us`} />\n                </IconPlus>\n                <NoneInput\n                  type=\"file\"\n                  id=\"newPhotoInput\"\n                  name=\"newPhoto\"\n                  onChange={event => {\n                    setFieldValue(\n                      'newPhoto',\n                      URL.createObjectURL(event.currentTarget.files[0])\n                    );\n                    handleAvatarClick(event);\n                  }}\n                />\n              </PlusBtn>\n            </IconUserWrapper>\n\n            <LabelText>\n              <FieldUser type=\"text\" name=\"newName\" />\n              <ErrorMessage name=\"newName\" component=\"div\" />\n            </LabelText>\n\n            <LabelText>\n              <FieldUser type=\"email\" name=\"newEmail\" />\n              <ErrorMessage name=\"newEmail\" component=\"div\" />\n            </LabelText>\n\n            <LabelPass>\n              <FieldUser\n                type={showPassword ? 'text' : 'password'}\n                id=\"password\"\n              />\n              <PasswordView onClick={togglePasswordVisibility}>\n                {showPassword ? (\n                  <PasswordIcon src={eyeHide} alt=\"Hide Password\"/>\n                ) : (\n                  <Svg>\n                    <use stroke=\"gray\" href={`${Sprite}#eye-password`} />\n                  </Svg>\n                )}\n              </PasswordView>\n              <ErrorMessage name=\"newPassword\" component=\"div\" />\n            </LabelPass>\n\n            <SaveBtn\n              type=\"button\"\n              disabled={isSubmitting}\n              onClick={() => {\n                handleFormSubmit(values);\n                onClose();\n              }}\n            >\n              <TextBtn>Save</TextBtn>\n            </SaveBtn>\n          </FormBox>\n        )}\n      </Formik>\n    </div>\n  );\n};\n\nexport default EditProfile;\n","import Modal from 'components/Modal/Modal';\nimport EditProfile from './EditProfile';\n\nconst EditProfileModal = ({ onClose }) => {\n  const handleCloseModal = () => {\n    onClose();\n  };\n\n  return (\n    <div>\n      <Modal\n        isOpen={true}\n        handleClose={handleCloseModal}\n        heading={'Edit profile'}\n      >\n        <EditProfile onClose={handleCloseModal} />\n      </Modal>\n    </div>\n  );\n};\n\nexport default EditProfileModal;\n","import React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { Container, Avatar, UserIcon } from './UserInfo.styled';\nimport EditProfileModal from 'components/EditProfile/EditProfileModal';\nimport Sprite from '../../images/sprite.svg';\nimport { selectUser } from 'redux/auth/selectors';\n\nconst UserInfo = ({ theme }) => {\n  const { username, avatarURL } = useSelector(selectUser);\n  const [isEditProfileModalOpen, setIsEditProfileModalOpen] = useState(false);\n\n  const openEditProfileModal = () => {\n    setIsEditProfileModalOpen(true);\n  };\n\n  const closeEditProfileModal = () => {\n    setIsEditProfileModalOpen(false);\n  };\n\n  return (\n    <Container>\n      <div>{username}</div>\n      {avatarURL ? (\n        <Avatar\n          src={avatarURL}\n          alt=\"User Avatar\"\n          onClick={openEditProfileModal}\n        />\n      ) : (\n        <UserIcon\n          className={`icon-user theme-${theme}`}\n          onClick={openEditProfileModal}\n        >\n          <use href={`${Sprite}#icon-user`} />\n        </UserIcon>\n      )}\n      {isEditProfileModalOpen && <EditProfileModal onClose={closeEditProfileModal} />}\n         </Container>\n  );\n};\n\nexport default UserInfo;\n\n\n\n\n\n\n// import React from 'react';\n// import { useSelector } from 'react-redux';\n// import { Container, Avatar,  UserIcon  } from './UserInfo.styled';\n// import EditProfile from 'components/EditProfile/EditProfile';\n// import Sprite from '../../images/sprite.svg';\n\n// const setAvatarIcon = (activeUserTheme) => {\n//   switch (activeUserTheme) {\n//        case 'light':\n//       return '#icon-userlight';\n//       case 'dark':\n//       return '#icon-userdark';\n//     case 'violet':\n//       return '#icon-userviolet';\n//     default:\n//       return '#icon-userlight';\n//   }\n// };\n\n// const UserInfo = ({theme}) => {\n//   const { avatarURL, username } = useSelector(state => state.profile);\n//   const [isModalOpen, setModalOpen] = React.useState(false);\n\n//   const openModal = () => {\n//     setModalOpen(true);\n//   };\n\n//   const closeModal = () => {\n//     setModalOpen(false);\n//   };\n\n//   const avatarIcon = setAvatarIcon(theme);\n\n//   return (\n//     <Container>\n//       <div>{username}</div>\n//       {avatarURL ? (\n//         <Avatar src={avatarURL} alt=\"User Avatar\" onClick={openModal} />\n//       ) : (\n//         <UserIcon onClick={openModal}>\n//         <svg className={`icon-user`} width=\"32\" height=\"32\">\n//           <use href={Sprite + avatarIcon} />\n//         </svg>\n//       </UserIcon>\n//       )}\n//       {isModalOpen && <EditProfile onClose={closeModal} />}\n//     </Container>\n//   );\n// };\n\n// export default UserInfo;\n","import styled from '@emotion/styled';\nimport { NavLink } from 'react-router-dom';\n\nexport const SidebarBlock = styled.aside`\n  display: flex;\n  flex-direction: column;\n  width: 260px;\n  min-height: 100vh;\n  padding: 24px;\n\n  background-color: var(--nav_bgc);\n  color: var(--nav_main_color);\n  @media (max-width: 1439px) {\n    display: none;\n  }\n  &.open {\n    display: flex;\n    flex-direction: column;\n    position: absolute;\n    top: 0;\n    left: 0;\n    z-index: 1;\n  }\n`;\nexport const TitleBlock = styled.div`\n  display: flex;\n  align-items: center;\n  margin-bottom: 60px;\n`;\nexport const SvgLightning = styled.svg`\n  width: 32px;\n  height: 32px;\n  margin-right: 8px;\n  border-radius: 6px;\n`;\nexport const Title = styled.h3`\n  color: var(--nav_main_color);\n  text-shadow: 0px 4px 4px 0px rgba(0, 0, 0, 0.25);\n  font-family: Poppins;\n  font-weight: 600;\n  letter-spacing: -0.64px;\n`;\nexport const MyBoardTitle = styled.p`\n  margin-bottom: 8px;\n\n  color: var(--nav_second_color);\n  font-family: Poppins;\n  font-size: 12px;\n  letter-spacing: -0.24px;\n`;\nexport const BoardTitleBlock = styled.div`\n  display: flex;\n  gap: 50px;\n  align-items: center;\n  margin-bottom: 40px;\n  padding: 14px 0;\n  border-top: 1px solid var(--line_color);\n  border-bottom: 1px solid var(--line_color);\n\n  font-family: Poppins;\n  font-weight: 500;\n  letter-spacing: -0.28px;\n`;\nexport const ButtonAdd = styled.button`\n  width: 40px;\n  height: 36px;\n  display: flex;\n  align-items: center;\n  padding: 10px 8px;\n  border-radius: 6px;\n  border: none;\n\n  background-color: var(--create_normal);\n  &:hover {\n    background-color: var(--create_active);\n  }\n  > svg {\n    stroke: var(--create_plus_color);\n  }\n`;\nexport const BoardList = styled.li`\n  display: flex;\n  align-items: center;\n  font-weight: 500;\n  letter-spacing: -0.28px;\n  margin-bottom: 44px;\n`;\nexport const TitleBoard = styled.div`\n  display: flex;\n  > svg {\n    stroke: var(--nav_second_color);\n    margin-right: 8px;\n  }\n`;\nexport const BoardIcons = styled.div`\n  display: flex;\n  margin-left: auto;\n`;\nexport const EditIcon = styled.svg`\n  width: 16px;\n  height: 16px;\n\n  stroke: var(--nav_second_color);\n  opacity: 0.5;\n  fill: transparent;\n`;\n\nexport const ButtonIcon = styled.button`\n  outline: none;\n  border: none;\n  background-color: transparent;\n  margin-right: 8px;\n  &:last-child {\n    margin-right: 0;\n  }\n`;\n\nexport const NeedHelpBlock = styled.div`\n  border-radius: 8px;\n  margin-bottom: 24px;\n  padding: 20px;\n  margin-top: auto;\n\n  background-color: var(--need_bgc);\n  color: var(--nav_main_color);\n\n  @media (max-width: 768px) {\n    display: none;\n  }\n`;\n\nexport const HelpContent = styled.p`\n  line-height: 20px;\n  letter-spacing: -0.28px;\n  color: var(--nav_main_color);\n  > span {\n    color: var(--span_color);\n  }\n`;\nexport const NeedHelpButton = styled.button`\n  display: flex;\n  align-items: center;\n  background-color: transparent;\n  border: none;\n  margin-top: 20px;\n  padding: 0;\n\n  color: var(--nav_main_color);\n`;\nexport const SvgHelp = styled.svg`\n  stroke: var(--nav_main_color);\n  fill: rgba(0, 0, 0, 0);\n  width: 20px;\n  height: 20px;\n  margin-right: 8px;\n`;\nexport const LogoutBtn = styled.button`\n  display: flex;\n  align-items: center;\n  gap: 14px;\n  border: none;\nmargin-top: auto;\n  color: var(--nav_main_color)\n  font-family: Poppins;\n  font-weight: 500;\n  font-size: 16px;\n  background-color: transparent;\n  padding: 0;\n  > svg {\n    stroke: var(--logout_fill);\n    &:hover {\n      stroke: var(--logout_fill_active);\n    }\n  }\n`;\n\nexport const Flower = styled.img`\n  margin-bottom: 14px;\n  display: block;\n`;\n\nexport const Nav = styled(NavLink)`\ndisplay: flex;\nwidth: 100%;\n  color: var(--nav_main_color);\n`;\n","import styled from '@emotion/styled';\n\nexport const MainButton = styled.button`\n  width: 100%;\n\n  border-radius: 8px;\n  border: none;\n\n  padding: 14px;\n\n  color: var(--text_btn);\n  background: var(--normal_btn);\n  transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  font-family: 'Poppins';\n\n  &:hover {\n    background: var(--active_btn);\n    transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  }\n`;\n","import styled from '@emotion/styled';\nimport { Field } from 'formik';\n\nexport const Input = styled(Field)`\n  width: 100%;\n  margin-bottom: 14px;\n  padding: 14px 18px;\n  border-radius: 8px;\n  border: 1px solid var(--input_color);\n  outline: none;\n  opacity: 0.4;\n\n  color: var(--modal_main_color);\n  background-color: var(--modal_bgc);\n  font-family: Poppins;\n  font-weight: 400;\n  font-size: 14px;\n  line-height: normal;\n  letter-spacing: -0.28px;\n  &:hover,\n  &:focus,\n  &:active {\n    background-color: var(--modal_bgc);\n    opacity: 1;\n    box-shadow: 0px 4px 16px 0px rgba(22, 22, 22, 0.08);\n  }\n`;\n\nexport const Textarea = styled(Field)`\n  width: 100%;\n  height: 120px;\n  margin-bottom: 24px;\n  padding: 14px 18px;\n  border-radius: 8px;\n  border: 1px solid var(--input_color);\n  outline: none;\n  opacity: 0.4;\n\n  color: var(--modal_main_color);\n  background-color: var(--modal_bgc);\n  font-family: Poppins;\n  font-weight: 400;\n  font-size: 14px;\n  line-height: normal;\n  letter-spacing: -0.28px;\n  &:hover,\n  &:focus,\n  &:active {\n    opacity: 1;\n    box-shadow: 0px 4px 16px 0px rgba(22, 22, 22, 0.08);\n  }\n`;\n","import * as yup from 'yup';\n\nexport const HelpSchema = yup.object().shape({\n  email: yup.string().email('Invalid email format').required('Email is required').matches(\n    /^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}$/,\n    'Invalid email format'\n  ),\n  comment: yup.string().min(10, 'Comment must be at least 10 characters').max(500, 'Name must be no more than 500 characters').required('Comment is required'),\n});","import { Formik, ErrorMessage, Form } from 'formik';\nimport { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { needHelp } from '../../redux/auth/operations';\nimport { MainButton } from 'components/Button/Button';\nimport { Input, Textarea } from './NeedHelp.styled';\nimport { HelpSchema } from 'schemas/helpSchema';\n\nconst initialValues = {\n  email: '',\n  comment: '',\n};\n\nconst NeedHelpForm = ({ handleCloseModal }) => {\n  const dispatch = useDispatch();\n\n  const handleSubmit = async (values, { resetForm }) => {\n    const { email, comment } = values;\n    console.log({ email, comment });\n    try {\n      const result = await dispatch(needHelp({ email, comment }));\n      if (needHelp.fulfilled.match(result)) {\n        console.log('Request successful');\n        resetForm(initialValues);\n        handleCloseModal();\n      } else {\n      }\n    } catch (err) {\n      console.log('Error:', err.message);\n    }\n  };\n\n  return (\n    <div>\n      <Formik\n        initialValues={initialValues}\n        validationSchema={HelpSchema}\n        onSubmit={handleSubmit}\n      >\n        {({ errors, touched, submitCount }) => (\n          <Form autoComplete=\"off\">\n            <Input type=\"email\" name=\"email\" placeholder=\"Email address\" />\n            <ErrorMessage name=\"email\" />\n            <div>\n              <Textarea\n                component=\"textarea\"\n                name=\"comment\"\n                placeholder=\"Comment\"\n                style={{\n                  resize: 'none',\n                }}\n              />\n              <ErrorMessage name=\"comment\" />\n              {submitCount > 0 &&\n                errors.comment &&\n                (!touched.comment || touched.comment) && (\n                  <div>Please enter a comment</div>\n                )}\n            </div>\n            <MainButton type=\"submit\">Send</MainButton>\n          </Form>\n        )}\n      </Formik>\n    </div>\n  );\n};\n\nexport default NeedHelpForm;\n\nNeedHelpForm.propTypes = {\n  handleCloseModal: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport Modal from '../Modal/Modal';\nimport NeedHelpForm from './NeedHelpForm';\n\nconst NeedHelpModal = ({ closeModal }) => {\n  const handleCloseModal = () => {\n    closeModal();\n  };\n\n  return (\n    <div>\n      <Modal isOpen={true} handleClose={handleCloseModal} heading={'Need help'}>\n      <NeedHelpForm handleCloseModal={handleCloseModal} />\n      </Modal>\n    </div>\n  );\n};\n\nexport default NeedHelpModal;\n\nNeedHelpModal.propTypes = {\n  closeModal: PropTypes.func.isRequired,\n};","export const selectBoards = state => state.boards.boards;\n","import * as Yup from 'yup';\n\nexport const addBoardSchema = Yup.object().shape({\n  title: Yup.string().required('Title is required'),\n});\n","import styled from '@emotion/styled';\nimport { ErrorMessage, Field } from 'formik';\n\nexport const StyledInputField = styled(Field)`\n  width: 302px;\n  padding: 14px 18px;\n  margin-bottom: 24px;\n\n  border-radius: 8px;\n  border: 1px solid var(--input_color);\n  box-shadow: 0px 4px 16px 0px rgba(22, 22, 22, 0.08);\n  opacity: 0.4;\n  background-color: var(--modal_bgc);\n  font-family: 'Poppins', sans-serif;\n  font-weight: 400;\n  font-size: 14px;\n  outline: none;\n  text-transform: capitalize;\n\n  &:hover,\n  &:focus,\n  &:active {\n    outline: none;\n    opacity: 1;\n  }\n`;\n\nexport const ErrorMsg = styled(ErrorMessage)`\n  color: red;\n  font-size: 14px;\n  margin-bottom: 10px;\n`;\n\nexport const StyledSubtitle = styled.p`\n  margin-bottom: 14px;\n  color: var(--modal_main_color);\n  font-family: Poppins;\n  font-size: 14px;\n  font-style: normal;\n  font-weight: 500;\n  line-height: normal;\n  letter-spacing: -0.28px;\n`;\n\nexport const IconsWrapper = styled.div`\n  margin-bottom: 24px;\n  display: flex;\n  flex-direction: row;\n  gap: 8px;\n`;\n\nexport const StyledSVG = styled.svg`\n  width: 18px;\n  height: 18px;\n  fill: rgba(0, 0, 0, 0);\n  stroke: var(--modal_second_color);\n`;\n\nexport const StyledRadioField = styled(Field)`\n  display: none;\n  &:checked + img {\n    border: 1px solid var(--modal_bgc);\n    border-radius: 5px;\n    transform: scale(1.2);\n  }\n  &:checked + svg {\n    stroke: var(--modal_main_color);\n  }\n  &:hover + img {\n    border: 1px solid var(--modal_bgc);\n    border-radius: 5px;\n  }\n`;\n\nexport const BgImagesWrapper = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 4px;\n  width: 252px;\n  height: 60px;\n  margin-bottom: 40px;\n`;\n","import React from 'react';\nimport { Formik, Form } from 'formik';\nimport PropTypes from 'prop-types';\nimport { v4 as uuidv4 } from 'uuid';\nimport { nanoid } from '@reduxjs/toolkit';\nimport sprite from '../../images/sprite.svg';\nimport { addBoardSchema } from 'schemas';\nimport {\n  BgImagesWrapper,\n  ErrorMsg,\n  IconsWrapper,\n  StyledInputField,\n  StyledRadioField,\n  StyledSVG,\n  StyledSubtitle,\n} from './ModalBoard.styles';\nimport { MainButton } from 'components/Button/Button';\nimport { useDispatch } from 'react-redux';\nimport { createBoard, editBoard } from 'redux/boards/boardOperations';\n\nconst icons = [\n  'icon-project',\n  'icon-star',\n  'icon-loading',\n  'icon-puzzle-piece',\n  'icon-container',\n  'icon-lightning',\n  'icon-colors',\n  'icon-hexagon',\n];\n\nconst backgrounds = [\n  'bg1',\n  'bg2',\n  'bg3',\n  'bg4',\n  'bg5',\n  'bg6',\n  'bg7',\n  'bg8',\n  'bg9',\n  'bg10',\n  'bg11',\n  'bg12',\n  'bg13',\n  'bg14',\n  'bg15',\n  'bg16',\n];\n\nfunction ModalBoard({ btnContent, closeModal, boardData }) {\n  const dispatch = useDispatch();\n\n  const initialValues =\n    btnContent === 'Create'\n      ? {\n          title: '',\n          icon: icons[0],\n          background: backgrounds[0],\n        }\n      : {\n          title: boardData?.title,\n          icon: boardData?.icon,\n          background: boardData?.background,\n        };\n\n  const handleSubmit = (values, { resetForm }) => {\n    const boardId = `3${uuidv4().replace(/-/g, '')}`;\n\n    const newBoard = {\n      id: boardId,\n      title: values.title.trim(),\n      icon: values.icon,\n      background: values.background,\n      boardsData: { tasks: {}, columns: {}, columnOrder: [] },\n    };\n    if (btnContent === 'Create') {\n      dispatch(createBoard(newBoard));\n    } else if (\n      values.title !== boardData.title ||\n      values.icon !== boardData.icon ||\n      values.background !== boardData.background\n    ) {\n      dispatch(editBoard({ newBoard, id: boardData._id }));\n    }\n\n    resetForm();\n    closeModal();\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={addBoardSchema}\n      onSubmit={handleSubmit}\n    >\n      {({ handleChange, values }) => (\n        <Form autoComplete=\"off\">\n          <StyledInputField\n            type=\"text\"\n            name=\"title\"\n            placeholder=\"Title\"\n            onChange={handleChange}\n            value={values.title}\n          />\n          <ErrorMsg name=\"title\" component=\"p\" />\n          <StyledSubtitle>Icons</StyledSubtitle>\n          <IconsWrapper>\n            {icons.map(icon => (\n              <label key={nanoid()}>\n                <StyledRadioField\n                  type=\"radio\"\n                  name=\"icon\"\n                  value={icon}\n                  onChange={handleChange}\n                  checked={values.icon === icon}\n                />\n                <StyledSVG>\n                  <use href={`${sprite}#${icon}`}></use>\n                </StyledSVG>\n              </label>\n            ))}\n          </IconsWrapper>\n          <StyledSubtitle>Background</StyledSubtitle>\n          <BgImagesWrapper>\n            {backgrounds.map((background, i) => (\n              <label key={nanoid()}>\n                <StyledRadioField\n                  type=\"radio\"\n                  name=\"background\"\n                  value={background}\n                  onChange={handleChange}\n                  checked={values.background === background}\n                />\n                <img\n                  src={require(`../../images/backgrounds/${background}.jpg`)}\n                  alt={`background variant ${i + 1}`}\n                  width=\"28\"\n                />\n              </label>\n            ))}\n          </BgImagesWrapper>\n          <MainButton type=\"submit\">{btnContent}</MainButton>\n        </Form>\n      )}\n    </Formik>\n  );\n}\n\nModalBoard.propTypes = {\n  btnContent: PropTypes.string.isRequired,\n  closeModal: PropTypes.func.isRequired,\n  boardData: PropTypes.object,\n};\n\nexport default ModalBoard;\n","import ModalBoard from './ModalBoard';\n\nexport default ModalBoard;\n","import {\n  SidebarBlock,\n  ButtonAdd,\n  SvgLightning,\n  Title,\n  TitleBlock,\n  BoardTitleBlock,\n  MyBoardTitle,\n  NeedHelpBlock,\n  NeedHelpButton,\n  SvgHelp,\n  HelpContent,\n  LogoutBtn,\n  Flower,\n  BoardList,\n  EditIcon,\n  BoardIcons,\n  TitleBoard,\n  Nav,\n  ButtonIcon,\n} from './Sidebar.styled';\nimport sprite from '../../images/sprite.svg';\nimport flower from '../../images/flower.png';\nimport { useState, useEffect } from 'react';\nimport { logOut } from 'redux/auth/operations';\nimport NeedHelpModal from 'components/NeedHelp/NeedHelpModal';\nimport { deleteBoard } from 'redux/boards/boardOperations';\nimport { selectBoards } from 'redux/boards/boardsSelectors';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getBoards } from 'redux/boards/boardOperations';\nimport Modal from 'components/Modal/Modal';\nimport ModalBoard from 'components/ModalBoard';\n\nconst actionsList = { add: 'add', edit: 'edit' };\n\nexport function Sidebar({ theme, isOpen }) {\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [modalType, setModalType] = useState(actionsList.add);\n  const [boardData, setBoardData] = useState(null);\n  const [isShow, setIsShow] = useState(false);\n  const boards = useSelector(selectBoards);\n  const dispatch = useDispatch();\n  useEffect(\n    () => {\n      dispatch(getBoards());\n    },\n    [dispatch],\n    boards\n  );\n\n  const toggleModal = () => {\n    setIsModalOpen(!isModalOpen);\n  };\n\n  const handleModalType = e => {\n    const buttonAction = e.currentTarget.ariaLabel;\n    const editButtonId = e.currentTarget.getAttribute('data-board-id') || '';\n    if (buttonAction === actionsList.add) {\n      setModalType(actionsList.add);\n      toggleModal();\n    } else {\n      setModalType(actionsList.edit);\n      setBoardData(boards.filter(board => board._id === editButtonId)[0]);\n      toggleModal();\n    }\n  };\n\n  const showModal = () => {\n    setIsShow(true);\n  };\n\n  const closeModal = () => {\n    setIsShow(false);\n  };\n\n  return (\n    <SidebarBlock className={`theme-${theme} ${isOpen ? 'open' : 'closed'}`}>\n      <Nav to=\"/\">\n        <TitleBlock>\n          <SvgLightning>\n            <use href={`${sprite}#icon-logo`} />\n          </SvgLightning>\n          <Title>Task Pro</Title>\n        </TitleBlock>\n      </Nav>\n      <MyBoardTitle>My boards</MyBoardTitle>\n      <BoardTitleBlock>\n        <p>Create a new board</p>\n        <ButtonAdd aria-label=\"add\" type=\"button\" onClick={handleModalType}>\n          <svg width={20} height={20}>\n            <use href={`${sprite}#icon-plus`} />\n          </svg>\n        </ButtonAdd>\n      </BoardTitleBlock>\n      <ul>\n        {boards.map(board => (\n          <BoardList key={board._id}>\n            <Nav to={`/home/${board.title}`}>\n              <TitleBoard>\n                <svg width={18} height={18}>\n                  <use href={`${sprite}#${board.icon}`} />\n                </svg>\n                {board.title}\n              </TitleBoard>\n           \n\n            <BoardIcons>\n              <ButtonIcon\n                type=\"button\"\n                aria-label=\"edit\"\n                data-board-id={board._id}\n                onClick={handleModalType}\n              >\n                <EditIcon>\n                  <use href={`${sprite}#icon-pencil`} />\n                </EditIcon>\n              </ButtonIcon>\n              <ButtonIcon\n                type=\"button\"\n                aria-label=\"edit\"\n                data-board-id={board._id}\n                onClick={handleModalType}\n              >\n                <EditIcon onClick={() => dispatch(deleteBoard(board._id))}>\n                  <use href={`${sprite}#icon-trash`} />\n                </EditIcon>\n              </ButtonIcon>\n            </BoardIcons>\n            </Nav>\n          </BoardList>\n        ))}\n      </ul>\n      {isModalOpen && (\n        <Modal\n          isOpen={toggleModal}\n          handleClose={toggleModal}\n          heading={modalType === actionsList.add ? 'New board' : 'Edit board'}\n        >\n          <ModalBoard\n            btnContent={modalType === actionsList.add ? 'Create' : 'Edit'}\n            closeModal={toggleModal}\n            boardData={boardData}\n          />\n        </Modal>\n      )}\n      <NeedHelpBlock>\n        <Flower src={flower} alt=\"flower\" />\n        <HelpContent>\n          If you need help with <span>TaskPro</span>, check out our support\n          resources or reach out to our customer support team.\n        </HelpContent>\n        <NeedHelpButton type=\"button\" name=\"help\" onClick={showModal}>\n          <SvgHelp>\n            <use href={`${sprite}#icon-help`} />\n          </SvgHelp>\n          Need help?\n        </NeedHelpButton>\n        {isShow && <NeedHelpModal closeModal={closeModal} />}\n      </NeedHelpBlock>\n\n      <LogoutBtn type=\"button\" name=\"logout\" onClick={() => dispatch(logOut())}>\n        <svg width={32} height={32}>\n          <use xlinkHref={`${sprite}#icon-login`}></use>\n        </svg>\n        Log out\n      </LogoutBtn>\n    </SidebarBlock>\n  );\n}\n","import styled from '@emotion/styled';\n\nexport const ThemeContainer = styled.div`\n  position: relative;\n`;\n\nexport const ThemeList = styled.ul`\nposition: absolute;\n    top: 100%;\n    left: -10%;\n    transform: translate(-100%, 10%);\n    width: 100px;\n    height: 107px;\n    display: flex;\n  flex-direction: column;\n    padding: 18px 44px 18px 18px;\n    gap: 4px;\n  background: var(--theme_bgc);\n  box-shadow: 0px 4px 16px 0px var(--theme_shadow);\n  border-radius: 8px;\n  border: 1px solid var(--theme_border);\n  cursor: pointer;\n  z-index: 99;\n    z-index: 3;\n   }\n`;\n\nexport const ThemeItem = styled.li`\n  font-family: Poppins;\n  font-size: 14px;\n  font-style: normal;\n  font-weight: 400;\n  line-height: normal;\n  letter-spacing: -0.28px;\n  color: var(--theme_color);\n  cursor: pointer;\n  &:hover {\n    color: var(--theme_active);\n  }\n`;\n\n// export const StyledSelect = styled(Select)`\n//   /* Стилі для вибраних тем */\n//   .css-1nmdiq5-menu {\n//     position: absolute;\n//     top: 100%;\n//     left: -10%;\n//     transform: translate(-100%, 10%);\n//     width: 100px;\n//     height: 107px;\n//     padding-left: 18px;\n//     border-radius: 8px;\n//   border: 1px solid #BEDBB0;\n//   background: #FCFCFC;\n//   box-shadow: 0px 4px 16px 0px rgba(17, 17, 17, 0.10);\n//     z-index: 1;\n//   }\n\n//   .css-1f769on{\n\n//   }\n\n//   /* Стилі для опцій */\n\n//   .css-d7l1ni-option\n//   css-10wo9uf-option{\n//     font-family: Poppins;\n//   font-size: 14px;\n//   font-style: normal;\n//   font-weight: 400;\n//   line-height: normal;\n//   letter-spacing: -0.28px;\n//   color: var(--theme_color);\n//   background-color: var(--theme_bgc);\n//     cursor: pointer;\n//     &:hover {\n//       // background-color: var(--theme_active);\n//       color: var(--theme_text);\n//     }\n//   }\n// `;\n\n// export const SelectStyles = {\n//   control: provided => ({\n//     ...provided,\n//     display: 'none',\n//     // Додайте стилі для контролу (значення) Select\n//   }),\n//   option: provided => ({\n//     ...provided,\n//      // Приховати опції\n//   }),\n// };\n\n// export const Select = styled.select`\n//   // position: absolute;\n//   bottom: -70px;\n//   left: 50%;\n//   transform: translateX(-50%);\n//   padding: 18px 44px 18px 18px;\n//   display: flex;\n//   flex-direction: column;\n//   justify-content: center;\n//   gap: 4px;\n//   background: var(--theme_bgc);\n//   box-shadow: 0px 4px 16px 0px var(--theme_shadow);\n//   border-radius: 8px;\n//   border: 1px solid var(--border_theme);\n//   cursor: pointer;\n//   z-index: 99;\n//   appearance: none; /* Remove default arrow */\n// `;\n\n// export const Option = styled.option`\n//   font-family: Poppins;\n//   font-size: 14px;\n//   font-style: normal;\n//   font-weight: 400;\n//   line-height: normal;\n//   letter-spacing: -0.28px;\n//   color: var(--theme_color);\n//   background-color: var(--theme_bgc); /* Set background color */\n\n//   &:hover,\n//   &:focus,\n//   &:active {\n//     background-color: var(--theme_active);\n//     color: var(--theme_text); /* Change text color on interaction */\n//   }\n// `;\n\n// .css-1wa3eu0-singleValue {\n//   // color: var(--close_active);\n//      overflow: hidden;\n// }\n\n/* Відобразити опції */\n//  .css-1s2ci2r-menu {\n\n// }\n\n// export const SelectContainer = styled.div`\n//   position: absolute;\n//   top: 100%;\n//   left: -10%;\n//   transform: translate(-100%, 10%);\n//   width: 100px;\n//   height: 107px;\n//   // padding-left: 18px;\n//   border-radius: 8px;\n// border: 1px solid #BEDBB0;\n// background: #FCFCFC;\n// box-shadow: 0px 4px 16px 0px rgba(17, 17, 17, 0.10);\n// `;\n","import React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectUser } from 'redux/auth/selectors';\nimport { updateUser } from 'redux/auth/operations';\nimport { ThemeContainer, ThemeList, ThemeItem } from './ThemeSelector.styled';\n\nconst ThemeSelector = ({ onClose }) => {\n  const { theme } = useSelector(selectUser);\n  const dispatch = useDispatch();\n  const [currentTheme, setCurrentTheme] = useState(theme);\n\n  useEffect(() => {\n    document.body.classList.remove('LIGHT', 'DARK', 'VIOLET');\n    document.body.classList.add(currentTheme);\n  }, [currentTheme]);\n\n  const themeOptions = [\n    { value: 'LIGHT', label: 'Light' },\n    { value: 'DARK', label: 'Dark' },\n    { value: 'VIOLET', label: 'Violet' },\n  ];\n\n  const onHandleTheme = async newTheme => {\n    setCurrentTheme(newTheme);\n\n    try {\n      await dispatch(updateUser({ theme: newTheme.toUpperCase() }));\n\n      onClose();\n    } catch (error) {\n      console.error('Failed to update theme:', error);\n    }\n  };\n\n  return (\n    <ThemeContainer>\n      <ThemeList>\n        {themeOptions.map(option => (\n          <ThemeItem\n            key={option.value}\n            onClick={() => onHandleTheme(option.value)}\n            className={currentTheme === option.value ? 'active' : ''}\n          >\n            {option.label}\n          </ThemeItem>\n        ))}\n      </ThemeList>\n    </ThemeContainer>\n  );\n};\n\nexport default ThemeSelector;\n\n\n\n\n\n// import React, { useState, useEffect } from 'react';\n// import { useSelector, useDispatch } from 'react-redux';\n// import { selectUser } from 'redux/auth/selectors';\n// import { updateUser } from 'redux/auth/operations';\n// import { ThemeContainer, ThemeList, ThemeItem } from './ThemeSelector.styled';\n\n// const ThemeSelector = ({ onClose }) => {\n//   const { theme } = useSelector(selectUser);\n//   const dispatch = useDispatch();\n//   const [currentTheme, setCurrentTheme] = useState(theme);\n\n//   useEffect(() => {\n//     document.body.classList.remove('light', 'dark', 'violet');\n//     document.body.classList.add(currentTheme);\n//   }, [currentTheme]);\n\n//   const themeOptions = [\n//     { value: 'light', label: 'Light' },\n//     { value: 'dark', label: 'Dark' },\n//     { value: 'violet', label: 'Violet' },\n//   ];\n\n//   useEffect(() => {\n//     document.body.classList.remove('light', 'dark', 'violet');\n//     document.body.classList.add(currentTheme);\n//   }, [currentTheme]);\n\n//   const onHandleTheme = async newTheme => {\n//     console.log(newTheme);\n//     setCurrentTheme(newTheme);\n\n//     try {\n//       await dispatch(updateUser({ theme: newTheme.toUpperCase() }));\n//       onClose();\n//     } catch (error) {\n//       console.error('Failed to update theme:', error);\n//     }\n//   };\n\n//   return (\n//     <ThemeContainer>\n//       <ThemeList>\n//         {themeOptions.map(option => (\n//           <ThemeItem\n//             key={option.value}\n//             onClick={() => onHandleTheme(option.value)}\n//             className={currentTheme === option.value ? 'active' : ''}\n//           >\n//             {option.label}\n//           </ThemeItem>\n//         ))}\n//       </ThemeList>\n//     </ThemeContainer>\n//   );\n// };\n\n// export default ThemeSelector;\n\n\n\n\n\n\n// import React, { useState, useEffect } from 'react';\n// import { useSelector, useDispatch } from 'react-redux';\n// import { selectUser } from 'redux/auth/selectors';\n// import { updateUser } from 'redux/auth/operations';\n// import {  Container, StyledSelect, SelectStyles } from './ThemeSelector.styled';\n\n// const ThemeSelector = ({ isOpen, onClose }) => {\n//   const { theme } = useSelector(selectUser);\n//   const dispatch = useDispatch();\n//   const [currentTheme, setCurrentTheme] = useState(theme);\n\n//   useEffect(() => {\n//     document.body.classList.remove('light', 'dark', 'violet');\n//     document.body.classList.add(currentTheme);\n//   }, [currentTheme]);\n\n//   const themeOptions = [\n//     { value: 'light', label: 'Light' },\n//     { value: 'dark', label: 'Dark' },\n//     { value: 'violet', label: 'Violet' },\n//   ];\n\n//   const onHandleTheme = async selectedOption => {\n//     console.log(selectedOption);\n//     const newTheme = selectedOption.value;\n\n//     setCurrentTheme(newTheme);\n\n//     try {\n//       await dispatch(updateUser({ theme: newTheme }));\n//       onClose();\n//     } catch (error) {\n//       console.error('Failed to update theme:', error);\n//     }\n//   };\n\n//   return (\n//     <Container>\n//       <StyledSelect\n//         value={themeOptions.find(option => option.value === currentTheme)}\n//         onChange={onHandleTheme}\n//         options={themeOptions}\n//         isSearchable={false}\n//         styles={SelectStyles}\n//         menuIsOpen={isOpen}\n//       />\n//     </Container>\n//   );\n// };\n\n// export default ThemeSelector;\n","import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  width: auto;\n  max-width: 100%;\n  // color: #ffffff;\n  height: 68px;\n  padding: 14px 20px;\n  background-color: var(--header_bgc);\n  color: var(--header_theme_text);\n\n\n  @media (max-width: 1440px) {\n    padding: 18px 32px;\n  }\n  @media (max-width: 768px) {\n    padding: 18px 24px;\n  }\n`;\n\nexport const MenuIcon = styled.svg`\n  width: 24px;\n  height: 24px;\n  stroke: var(--header_user_text);\n\n  @media screen and (min-width: 375px) {\n    width: 32px;\n    height: 32px;\n  }\n\n  @media (min-width: 1440px) {\n    display: none;\n  }\n`;\n\nexport const HeaderWrap = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 14px;\n`;\n\nexport const HeaderNav = styled.div`\n// position: relative;\ndisplay: inline-flex;\njustify-content: center;\nalign-items: center;\ngap: 4px;\nmargin-right: 14px;\nwidth: 80px;\ncursor: pointer;\n`;\n\nexport const SelectIcon = styled.svg`\n  width: 16px;\n  height: 16px;\n  margin-left: 4px;\n  stroke: var(--chevron-down);\n  fill: none;\n  z-index: 999;\n`;\n\nexport const Text = styled.div`\ncolor: var(--header_theme_text);\nfont-family: Poppins;\nfont-size: 14px;\nfont-style: normal;\nfont-weight: 500;\nline-height: normal;\nletter-spacing: -0.28px;\n`;","import React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport UserInfo from 'components/UserInfo/UserInfo';\nimport { selectUser } from 'redux/auth/selectors';\nimport { Sidebar } from 'components/Sidebar/Sidebar';\nimport ThemeSelector from 'components/ThemeSelector/ThemeSelector';\nimport {\n  Container,\n  HeaderNav,\n  MenuIcon,\n  HeaderWrap,\n  SelectIcon,\n  Text,\n} from './Header.styled';\nimport Sprite from '../../images/sprite.svg';\n// import { updateUser } from 'redux/auth/operations';\n\nconst Header = () => {\n  const dispatch = useDispatch();\n  const { theme } = useSelector(selectUser);\n  const [isSideBarOpen, setSideBarOpen] = useState(false);\n  const [isThemeSelectorOpen, setThemeSelectorOpen] = useState(false);\n\n  useEffect(() => {\n      let timeout;\n\n    if (isSideBarOpen) {\n      timeout = setTimeout(() => {\n        document.addEventListener('click', handleOutsideClick);\n      }, 100);\n    } else {\n      document.removeEventListener('click', handleOutsideClick);\n    }\n\n    return () => {\n      clearTimeout(timeout);\n      document.removeEventListener('click', handleOutsideClick);\n    };\n  }, [dispatch, isSideBarOpen]);\n\n  const handleOutsideClick = e => {\n    if (!e.target.closest('aside')) {\n      setSideBarOpen(false);\n    }\n  };\n\n  const toggleSideBar = () => {\n    setSideBarOpen(!isSideBarOpen);\n  };\n\n  const toggleThemeSelector = () => {\n    setThemeSelectorOpen(!isThemeSelectorOpen);\n  };\n\n  return (\n    <Container>\n      <div onClick={toggleSideBar}>\n        <MenuIcon className={`icon-menu theme-${theme}`} width=\"32\" height=\"32\">\n          <use href={`${Sprite}#icon-menu`} />\n        </MenuIcon>\n      </div>\n      {isSideBarOpen && <Sidebar />}\n      <HeaderWrap>\n        <HeaderNav>\n          <div>\n            <SelectIcon width=\"16\" height=\"16\" onClick={toggleThemeSelector}>\n              <use href={`${Sprite}#icon-chevron-down`} />\n            </SelectIcon>\n          </div>\n          <Text>Theme</Text>\n        </HeaderNav>\n        {isThemeSelectorOpen && (\n          <ThemeSelector\n            onClose={() => setThemeSelectorOpen(false)}\n          />\n        )}\n        <UserInfo />\n      </HeaderWrap>\n      {isSideBarOpen && <Sidebar theme={theme} isOpen={isSideBarOpen} />}\n    </Container>\n  );\n};\n\nexport default Header;\n\n\n\n\n\n// import React, { useState, useEffect, useCallback } from 'react';\n// import { useDispatch, useSelector } from 'react-redux';\n// import UserInfo from 'components/UserInfo/UserInfo';\n// import { selectUser } from 'redux/auth/selectors';\n// import { updateUser } from 'redux/auth/operations';\n// import { Sidebar } from 'components/Sidebar/Sidebar';\n// import ThemeSelector from 'components/ThemeSelector/ThemeSelector';\n// import {\n//   Container,\n//   HeaderNav,\n//   MenuIcon,\n//   HeaderWrap,\n//   SelectIcon,\n//   Text,\n// } from './Header.styled';\n// import Sprite from '../../images/sprite.svg';\n\n// const Header = () => {\n//   const dispatch = useDispatch();\n//   const user = useSelector(selectUser); // Отримати інформацію про користувача зі стору\n//   const [isSideBarOpen, setSideBarOpen] = useState(false);\n//   const [isThemeSelectorOpen, setThemeSelectorOpen] = useState(false);\n\n//   const toggleTheme = useCallback(newTheme => {\n//     dispatch(updateUser(newTheme)); // Використовуйте вашу дію для оновлення теми у Redux-сховищі\n//   }, [dispatch]);\n\n//   useEffect(() => {\n//     const storedTheme = localStorage.getItem('theme');\n//     if (storedTheme) {\n//       toggleTheme(storedTheme); // Встановити тему з локального сховища\n//     }\n//     let timeout;\n\n//     if (isSideBarOpen) {\n//       timeout = setTimeout(() => {\n//         document.addEventListener('click', handleOutsideClick);\n//       }, 100);\n//     } else {\n//       document.removeEventListener('click', handleOutsideClick);\n//     }\n\n//     return () => {\n//       clearTimeout(timeout);\n//       document.removeEventListener('click', handleOutsideClick);\n//     };\n//   }, [dispatch, isSideBarOpen, toggleTheme]); \n\n//   const handleOutsideClick = e => {\n//     if (!e.target.closest('aside')) {\n//       setSideBarOpen(false);\n//     }\n//   };\n\n//   const toggleSideBar = () => {\n//     setSideBarOpen(!isSideBarOpen);\n//   };\n\n//   const toggleThemeSelector = () => {\n//     setThemeSelectorOpen(!isThemeSelectorOpen);\n//   };\n\n//   return (\n//     <Container className={`theme-${user.theme}`}> {/* Використовуйте тему користувача з Redux-сховища */}\n//       <div onClick={toggleSideBar}>\n//         <MenuIcon className={`icon-menu theme-${user.theme}`} width=\"32\" height=\"32\">\n//           <use href={`${Sprite}#icon-menu`} />\n//         </MenuIcon>\n//       </div>\n//       {isSideBarOpen && <Sidebar />}\n//       <HeaderWrap>\n//         <HeaderNav>\n//           <div>\n//             <SelectIcon width=\"16\" height=\"16\" onClick={toggleThemeSelector}>\n//               <use href={`${Sprite}#icon-chevron-down`} />\n//             </SelectIcon>\n//           </div>\n//           <Text>Theme</Text>\n//         </HeaderNav>\n//         {isThemeSelectorOpen && (\n//           <ThemeSelector\n//             isOpen={isThemeSelectorOpen} \n//             onClose={() => setThemeSelectorOpen(false)}\n//             onToggleThemeSelector={toggleThemeSelector} \n//           />\n//         )}\n//         <UserInfo />\n//       </HeaderWrap>\n//       {isSideBarOpen && <Sidebar theme={user.theme} isOpen={isSideBarOpen} />}\n//     </Container>\n//   );\n// };\n\n// export default Header;\n\n\n","import styled from '@emotion/styled';\n\nexport const HomeContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 100%;\n`;\n\nexport const TitlePage = styled.h1`\n  margin: 0 auto;\n  font-size: 14px;\n  font-style: normal;\n  font-weight: 400;\n  text-align: center;\n  line-height: 18px;\n  letter-spacing: -0.28px;\n  width: 486px;\n`;\n\nexport const LinkToCreate = styled.a`\n  color: #bedbb0;\n`;\n\nexport const Container = styled.div`\ndisplay: flex;\n`","export function EmptyPage (){\n    return (\n        <div>\n            <p>\n            Before starting your project, it is essential to create a board to visualize and track all the necessary tasks and milestones. This board serves as a powerful tool to organize the workflow and ensure effective collaboration among team members.\n            </p>\n        </div>\n    )\n}","import React, { useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport Header from 'components/Header/Header';\nimport { Sidebar } from 'components/Sidebar/Sidebar';\nimport { selectUser } from 'redux/auth/selectors';\nimport { Container } from './HomePage.styled';\nimport { useLocation, Outlet } from 'react-router-dom';\nimport { EmptyPage } from 'components/EmptyPage/EmptyPage';\nconst HomePage = () => {\n  const { theme } = useSelector(selectUser);\n  const location = useLocation();\n  const checkUrl = location.pathname.length > '/home/'.length;\n\n  useEffect(\n    () => {\n      document.body.classList.add(theme);\n    },\n    // eslint-disable-next-line\n    []\n  );\n\n  return (\n    <>\n      <Container>\n        <Sidebar theme={theme} />\n        <div style={{ width: '100%' }}>\n          <Header theme={theme} />\n          {!checkUrl && <EmptyPage theme={theme} />}\n        </div>\n      </Container>\n      <Container>\n        <Outlet />\n      </Container>\n    </>\n  );\n};\n\nexport default HomePage;\n\n// import React from 'react';\n// import { useSelector } from 'react-redux';\n// import Header from 'components/Header/Header';\n// import { Sidebar } from 'components/Sidebar/Sidebar';\n// import { Dashboard } from 'components/Dashboard/Dashboard';\n// import { Container } from './HomePage.styled';\n\n// const HomePage = () => {\n//   const theme = useSelector(state => state.auth.theme); // Отримати тему з Redux-сторі\n\n//   // Функція для встановлення класу теми на <html> елементі\n//   const setThemeClass = theme => {\n//     document.documentElement.className = '';\n//     document.documentElement.classList.add(`theme-${theme}`);\n//   };\n\n//   React.useEffect(() => {\n//     setThemeClass(theme); // Встановити клас теми під час завантаження сторінки\n//   }, [theme]);\n\n//   return (\n//     <Container>\n//       <Sidebar theme={theme} />\n//       <div style={{ width: '100%' }}>\n//         <Header theme={theme} />\n//         <Dashboard theme={theme} />\n//       </div>\n//     </Container>\n//   );\n// };\n\n// export default HomePage;\n\n// import React from 'react';\n// import { useSelector } from 'react-redux';\n// import { ThemeProvider } from 'hooks/themeContext';\n// import Header from 'components/Header/Header';\n// import { Sidebar } from 'components/Sidebar/Sidebar';\n// import { Dashboard } from 'components/Dashboard/Dashboard';\n// import { selectUser } from 'redux/auth/selectors'; // Підключити селектор для теми\n// import { Container } from './HomePage.styled';\n\n// const HomePage = () => {\n//   const theme = useSelector(selectUser); // Отримати тему з Redux-сторі\n\n//   // Якщо користувач не має встановленої теми, використовувати світлу тему за замовчуванням\n//   const userTheme = theme || 'light';\n\n//   return (\n//     <ThemeProvider>\n//       <Container>\n//         <Sidebar theme={userTheme} />\n//         <div style={{ width: '100%' }}>\n//           <Header theme={userTheme} />\n//           {/* Використовувати тему користувача для відображення */}\n//           <Dashboard theme={userTheme} />\n//         </div>\n//       </Container>\n//     </ThemeProvider>\n//   );\n// };\n\n// export default HomePage;\n\n// import React from 'react';\n// import { useSelector } from 'react-redux';\n// import Header from 'components/Header/Header';\n// import { Sidebar } from 'components/Sidebar/Sidebar';\n// import { Dashboard } from 'components/Dashboard/Dashboard';\n// // import { selectUser } from 'redux/auth/selectors';\n// import { Container } from './HomePage.styled';\n\n// const HomePage = () => {\n//   const theme = useSelector(state => state.auth.theme); // Отримати тему зі стору\n\n//   return (\n//     <Container className={`theme-${theme}`}>\n//       <Sidebar theme={theme} />\n//       <div style={{ width: '100%' }}>\n//         <Header theme={theme} />\n//         <Dashboard theme={theme} />\n//       </div>\n//     </Container>\n//   );\n// };\n\n// export default HomePage;\n\n// import React from 'react';\n// import { useSelector } from 'react-redux';\n// import { ThemeProvider } from 'hooks/themeContext';\n// import Header from 'components/Header/Header';\n// import { Sidebar } from 'components/Sidebar/Sidebar';\n// import { Dashboard } from 'components/Dashboard/Dashboard';\n// import { selectUser } from 'redux/auth/selectors';\n// import { Container } from './HomePage.styled';\n// const HomePage = () => {\n//   const theme = useSelector(selectUser);\n\n//   return (\n//     <ThemeProvider>\n//       <Container>\n//         <Sidebar theme={theme} />\n//         <div style={{ width: '100%' }}>\n//           <Header theme={theme} />\n//           <Dashboard theme={theme} />\n//         </div>\n//       </Container>\n//     </ThemeProvider>\n//   );\n// };\n\n// export default HomePage;\n","var map = {\n\t\"./bg1.jpg\": 7381,\n\t\"./bg10.jpg\": 7029,\n\t\"./bg11.jpg\": 2844,\n\t\"./bg12.jpg\": 6648,\n\t\"./bg13.jpg\": 41,\n\t\"./bg14.jpg\": 506,\n\t\"./bg15.jpg\": 3453,\n\t\"./bg16.jpg\": 6547,\n\t\"./bg2.jpg\": 814,\n\t\"./bg3.jpg\": 8621,\n\t\"./bg4.jpg\": 5502,\n\t\"./bg5.jpg\": 6390,\n\t\"./bg6.jpg\": 1411,\n\t\"./bg7.jpg\": 4102,\n\t\"./bg8.jpg\": 1806,\n\t\"./bg9.jpg\": 1282\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 2153;"],"names":["Container","styled","_templateObject","_taggedTemplateLiteral","Avatar","_templateObject2","UserIcon","_templateObject3","FormBox","Form","LabelPass","LabelText","FieldUser","Field","_templateObject4","IconUserWrapper","_templateObject5","AvatarImage","_templateObject6","SaveBtn","_templateObject7","NoneInput","_templateObject8","_templateObject9","PlusBtn","_templateObject10","TextBtn","_templateObject11","IconPlus","_templateObject12","PasswordView","_templateObject13","PasswordIcon","_templateObject14","Svg","_templateObject15","_ref","onClose","_useSelector","useSelector","selectUser","username","theme","email","password","avatarURL","_useState","useState","_useState2","_slicedToArray","showPassword","setShowPassword","_useState3","_useState4","avatarNewURL","setAvatarNewURL","dispatch","useDispatch","togglePasswordVisibility","handleFormSubmit","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","formValues","wrap","_context","prev","next","console","log","updateUser","newName","newEmail","newPassword","newPhoto","updateUserAvatar","stop","_x","apply","arguments","_jsx","children","Formik","initialValues","onSubmit","_ref3","isSubmitting","values","setFieldValue","_jsxs","type","name","alt","src","className","width","height","href","concat","Sprite","onClick","document","getElementById","click","id","onChange","event","URL","createObjectURL","currentTarget","files","e","preventDefault","selectedFile","target","startsWith","formData","FormData","append","handleAvatarClick","ErrorMessage","component","eyeHide","stroke","disabled","handleCloseModal","Modal","isOpen","handleClose","heading","EditProfile","isEditProfileModalOpen","setIsEditProfileModalOpen","openEditProfileModal","EditProfileModal","SidebarBlock","TitleBlock","SvgLightning","Title","MyBoardTitle","BoardTitleBlock","ButtonAdd","BoardList","TitleBoard","BoardIcons","EditIcon","ButtonIcon","NeedHelpBlock","HelpContent","NeedHelpButton","SvgHelp","_templateObject16","LogoutBtn","_templateObject17","Flower","_templateObject18","Nav","NavLink","_templateObject19","MainButton","Input","Textarea","HelpSchema","yup","shape","required","matches","comment","min","max","handleSubmit","resetForm","result","needHelp","sent","t0","message","_x2","validationSchema","_ref4","errors","touched","submitCount","autoComplete","placeholder","style","resize","closeModal","NeedHelpForm","selectBoards","state","boards","addBoardSchema","Yup","title","StyledInputField","ErrorMsg","StyledSubtitle","IconsWrapper","StyledSVG","StyledRadioField","BgImagesWrapper","icons","backgrounds","btnContent","boardData","icon","background","newBoard","uuidv4","replace","trim","boardsData","tasks","columns","columnOrder","createBoard","editBoard","_id","handleChange","value","map","checked","sprite","nanoid","i","require","actionsList","Sidebar","isModalOpen","setIsModalOpen","modalType","setModalType","_useState5","_useState6","setBoardData","_useState7","_useState8","isShow","setIsShow","useEffect","getBoards","toggleModal","handleModalType","buttonAction","ariaLabel","editButtonId","getAttribute","filter","board","to","deleteBoard","ModalBoard","NeedHelpModal","logOut","xlinkHref","ThemeContainer","ThemeList","ThemeItem","currentTheme","setCurrentTheme","body","classList","remove","add","onHandleTheme","newTheme","toUpperCase","error","label","option","MenuIcon","HeaderWrap","HeaderNav","SelectIcon","Text","isSideBarOpen","setSideBarOpen","isThemeSelectorOpen","setThemeSelectorOpen","timeout","setTimeout","addEventListener","handleOutsideClick","removeEventListener","clearTimeout","closest","ThemeSelector","UserInfo","EmptyPage","checkUrl","useLocation","pathname","length","_Fragment","Header","Outlet","webpackContext","req","webpackContextResolve","__webpack_require__","o","Error","code","keys","Object","resolve","module","exports"],"sourceRoot":""}